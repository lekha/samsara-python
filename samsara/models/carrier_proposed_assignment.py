# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class CarrierProposedAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accepted_time': 'object',
        'active_time': 'object',
        'driver': 'object',
        'first_seen_time': 'object',
        'id': 'str',
        'rejected_time': 'object',
        'shipping_docs': 'str',
        'trailers': 'list[TrailerNameOnlyResponse]',
        'vehicle': 'object'
    }

    attribute_map = {
        'accepted_time': 'acceptedTime',
        'active_time': 'activeTime',
        'driver': 'driver',
        'first_seen_time': 'firstSeenTime',
        'id': 'id',
        'rejected_time': 'rejectedTime',
        'shipping_docs': 'shippingDocs',
        'trailers': 'trailers',
        'vehicle': 'vehicle'
    }

    def __init__(self, accepted_time=None, active_time=None, driver=None, first_seen_time=None, id=None, rejected_time=None, shipping_docs=None, trailers=None, vehicle=None, local_vars_configuration=None):  # noqa: E501
        """CarrierProposedAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accepted_time = None
        self._active_time = None
        self._driver = None
        self._first_seen_time = None
        self._id = None
        self._rejected_time = None
        self._shipping_docs = None
        self._trailers = None
        self._vehicle = None
        self.discriminator = None

        if accepted_time is not None:
            self.accepted_time = accepted_time
        if active_time is not None:
            self.active_time = active_time
        if driver is not None:
            self.driver = driver
        if first_seen_time is not None:
            self.first_seen_time = first_seen_time
        if id is not None:
            self.id = id
        if rejected_time is not None:
            self.rejected_time = rejected_time
        if shipping_docs is not None:
            self.shipping_docs = shipping_docs
        if trailers is not None:
            self.trailers = trailers
        if vehicle is not None:
            self.vehicle = vehicle

    @property
    def accepted_time(self):
        """Gets the accepted_time of this CarrierProposedAssignment.  # noqa: E501


        :return: The accepted_time of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._accepted_time

    @accepted_time.setter
    def accepted_time(self, accepted_time):
        """Sets the accepted_time of this CarrierProposedAssignment.


        :param accepted_time: The accepted_time of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._accepted_time = accepted_time

    @property
    def active_time(self):
        """Gets the active_time of this CarrierProposedAssignment.  # noqa: E501


        :return: The active_time of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._active_time

    @active_time.setter
    def active_time(self, active_time):
        """Sets the active_time of this CarrierProposedAssignment.


        :param active_time: The active_time of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._active_time = active_time

    @property
    def driver(self):
        """Gets the driver of this CarrierProposedAssignment.  # noqa: E501


        :return: The driver of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this CarrierProposedAssignment.


        :param driver: The driver of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._driver = driver

    @property
    def first_seen_time(self):
        """Gets the first_seen_time of this CarrierProposedAssignment.  # noqa: E501


        :return: The first_seen_time of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._first_seen_time

    @first_seen_time.setter
    def first_seen_time(self, first_seen_time):
        """Sets the first_seen_time of this CarrierProposedAssignment.


        :param first_seen_time: The first_seen_time of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._first_seen_time = first_seen_time

    @property
    def id(self):
        """Gets the id of this CarrierProposedAssignment.  # noqa: E501

        Samsara ID for the assignment.  # noqa: E501

        :return: The id of this CarrierProposedAssignment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierProposedAssignment.

        Samsara ID for the assignment.  # noqa: E501

        :param id: The id of this CarrierProposedAssignment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rejected_time(self):
        """Gets the rejected_time of this CarrierProposedAssignment.  # noqa: E501


        :return: The rejected_time of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._rejected_time

    @rejected_time.setter
    def rejected_time(self, rejected_time):
        """Sets the rejected_time of this CarrierProposedAssignment.


        :param rejected_time: The rejected_time of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._rejected_time = rejected_time

    @property
    def shipping_docs(self):
        """Gets the shipping_docs of this CarrierProposedAssignment.  # noqa: E501

        Shipping Documents that this assignment will propose to the driver; maximum of 40 characters  # noqa: E501

        :return: The shipping_docs of this CarrierProposedAssignment.  # noqa: E501
        :rtype: str
        """
        return self._shipping_docs

    @shipping_docs.setter
    def shipping_docs(self, shipping_docs):
        """Sets the shipping_docs of this CarrierProposedAssignment.

        Shipping Documents that this assignment will propose to the driver; maximum of 40 characters  # noqa: E501

        :param shipping_docs: The shipping_docs of this CarrierProposedAssignment.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                shipping_docs is not None and len(shipping_docs) > 40):
            raise ValueError("Invalid value for `shipping_docs`, length must be less than or equal to `40`")  # noqa: E501

        self._shipping_docs = shipping_docs

    @property
    def trailers(self):
        """Gets the trailers of this CarrierProposedAssignment.  # noqa: E501

        Trailers that this assignment will propose to the driver.  # noqa: E501

        :return: The trailers of this CarrierProposedAssignment.  # noqa: E501
        :rtype: list[TrailerNameOnlyResponse]
        """
        return self._trailers

    @trailers.setter
    def trailers(self, trailers):
        """Sets the trailers of this CarrierProposedAssignment.

        Trailers that this assignment will propose to the driver.  # noqa: E501

        :param trailers: The trailers of this CarrierProposedAssignment.  # noqa: E501
        :type: list[TrailerNameOnlyResponse]
        """

        self._trailers = trailers

    @property
    def vehicle(self):
        """Gets the vehicle of this CarrierProposedAssignment.  # noqa: E501


        :return: The vehicle of this CarrierProposedAssignment.  # noqa: E501
        :rtype: object
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this CarrierProposedAssignment.


        :param vehicle: The vehicle of this CarrierProposedAssignment.  # noqa: E501
        :type: object
        """

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierProposedAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarrierProposedAssignment):
            return True

        return self.to_dict() != other.to_dict()
