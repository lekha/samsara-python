# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class EquipmentStatsResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'engine_rpm': 'EquipmentEngineRpm',
        'engine_seconds': 'EquipmentEngineSeconds',
        'engine_state': 'EquipmentEngineState',
        'fuel_percent': 'EquipmentFuelPercent',
        'gateway_engine_seconds': 'EquipmentGatewayEngineSeconds',
        'gateway_engine_state': 'EquipmentGatewayEngineState',
        'gps_odometer_meters': 'EquipmentGpsOdometerMeters',
        'id': 'str',
        'name': 'str',
        'obd_engine_seconds': 'EquipmentObdEngineSeconds',
        'obd_engine_state': 'EquipmentObdEngineState'
    }

    attribute_map = {
        'engine_rpm': 'engineRpm',
        'engine_seconds': 'engineSeconds',
        'engine_state': 'engineState',
        'fuel_percent': 'fuelPercent',
        'gateway_engine_seconds': 'gatewayEngineSeconds',
        'gateway_engine_state': 'gatewayEngineState',
        'gps_odometer_meters': 'gpsOdometerMeters',
        'id': 'id',
        'name': 'name',
        'obd_engine_seconds': 'obdEngineSeconds',
        'obd_engine_state': 'obdEngineState'
    }

    def __init__(self, engine_rpm=None, engine_seconds=None, engine_state=None, fuel_percent=None, gateway_engine_seconds=None, gateway_engine_state=None, gps_odometer_meters=None, id=None, name=None, obd_engine_seconds=None, obd_engine_state=None, local_vars_configuration=None):  # noqa: E501
        """EquipmentStatsResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._engine_rpm = None
        self._engine_seconds = None
        self._engine_state = None
        self._fuel_percent = None
        self._gateway_engine_seconds = None
        self._gateway_engine_state = None
        self._gps_odometer_meters = None
        self._id = None
        self._name = None
        self._obd_engine_seconds = None
        self._obd_engine_state = None
        self.discriminator = None

        if engine_rpm is not None:
            self.engine_rpm = engine_rpm
        if engine_seconds is not None:
            self.engine_seconds = engine_seconds
        if engine_state is not None:
            self.engine_state = engine_state
        if fuel_percent is not None:
            self.fuel_percent = fuel_percent
        if gateway_engine_seconds is not None:
            self.gateway_engine_seconds = gateway_engine_seconds
        if gateway_engine_state is not None:
            self.gateway_engine_state = gateway_engine_state
        if gps_odometer_meters is not None:
            self.gps_odometer_meters = gps_odometer_meters
        self.id = id
        self.name = name
        if obd_engine_seconds is not None:
            self.obd_engine_seconds = obd_engine_seconds
        if obd_engine_state is not None:
            self.obd_engine_state = obd_engine_state

    @property
    def engine_rpm(self):
        """Gets the engine_rpm of this EquipmentStatsResponseData.  # noqa: E501


        :return: The engine_rpm of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentEngineRpm
        """
        return self._engine_rpm

    @engine_rpm.setter
    def engine_rpm(self, engine_rpm):
        """Sets the engine_rpm of this EquipmentStatsResponseData.


        :param engine_rpm: The engine_rpm of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentEngineRpm
        """

        self._engine_rpm = engine_rpm

    @property
    def engine_seconds(self):
        """Gets the engine_seconds of this EquipmentStatsResponseData.  # noqa: E501


        :return: The engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentEngineSeconds
        """
        return self._engine_seconds

    @engine_seconds.setter
    def engine_seconds(self, engine_seconds):
        """Sets the engine_seconds of this EquipmentStatsResponseData.


        :param engine_seconds: The engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentEngineSeconds
        """

        self._engine_seconds = engine_seconds

    @property
    def engine_state(self):
        """Gets the engine_state of this EquipmentStatsResponseData.  # noqa: E501


        :return: The engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentEngineState
        """
        return self._engine_state

    @engine_state.setter
    def engine_state(self, engine_state):
        """Sets the engine_state of this EquipmentStatsResponseData.


        :param engine_state: The engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentEngineState
        """

        self._engine_state = engine_state

    @property
    def fuel_percent(self):
        """Gets the fuel_percent of this EquipmentStatsResponseData.  # noqa: E501


        :return: The fuel_percent of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentFuelPercent
        """
        return self._fuel_percent

    @fuel_percent.setter
    def fuel_percent(self, fuel_percent):
        """Sets the fuel_percent of this EquipmentStatsResponseData.


        :param fuel_percent: The fuel_percent of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentFuelPercent
        """

        self._fuel_percent = fuel_percent

    @property
    def gateway_engine_seconds(self):
        """Gets the gateway_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501


        :return: The gateway_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentGatewayEngineSeconds
        """
        return self._gateway_engine_seconds

    @gateway_engine_seconds.setter
    def gateway_engine_seconds(self, gateway_engine_seconds):
        """Sets the gateway_engine_seconds of this EquipmentStatsResponseData.


        :param gateway_engine_seconds: The gateway_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentGatewayEngineSeconds
        """

        self._gateway_engine_seconds = gateway_engine_seconds

    @property
    def gateway_engine_state(self):
        """Gets the gateway_engine_state of this EquipmentStatsResponseData.  # noqa: E501


        :return: The gateway_engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentGatewayEngineState
        """
        return self._gateway_engine_state

    @gateway_engine_state.setter
    def gateway_engine_state(self, gateway_engine_state):
        """Sets the gateway_engine_state of this EquipmentStatsResponseData.


        :param gateway_engine_state: The gateway_engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentGatewayEngineState
        """

        self._gateway_engine_state = gateway_engine_state

    @property
    def gps_odometer_meters(self):
        """Gets the gps_odometer_meters of this EquipmentStatsResponseData.  # noqa: E501


        :return: The gps_odometer_meters of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentGpsOdometerMeters
        """
        return self._gps_odometer_meters

    @gps_odometer_meters.setter
    def gps_odometer_meters(self, gps_odometer_meters):
        """Sets the gps_odometer_meters of this EquipmentStatsResponseData.


        :param gps_odometer_meters: The gps_odometer_meters of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentGpsOdometerMeters
        """

        self._gps_odometer_meters = gps_odometer_meters

    @property
    def id(self):
        """Gets the id of this EquipmentStatsResponseData.  # noqa: E501

        Unique Samsara ID for the equipment.  # noqa: E501

        :return: The id of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentStatsResponseData.

        Unique Samsara ID for the equipment.  # noqa: E501

        :param id: The id of this EquipmentStatsResponseData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EquipmentStatsResponseData.  # noqa: E501

        Name of the equipment.  # noqa: E501

        :return: The name of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EquipmentStatsResponseData.

        Name of the equipment.  # noqa: E501

        :param name: The name of this EquipmentStatsResponseData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def obd_engine_seconds(self):
        """Gets the obd_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501


        :return: The obd_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentObdEngineSeconds
        """
        return self._obd_engine_seconds

    @obd_engine_seconds.setter
    def obd_engine_seconds(self, obd_engine_seconds):
        """Sets the obd_engine_seconds of this EquipmentStatsResponseData.


        :param obd_engine_seconds: The obd_engine_seconds of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentObdEngineSeconds
        """

        self._obd_engine_seconds = obd_engine_seconds

    @property
    def obd_engine_state(self):
        """Gets the obd_engine_state of this EquipmentStatsResponseData.  # noqa: E501


        :return: The obd_engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :rtype: EquipmentObdEngineState
        """
        return self._obd_engine_state

    @obd_engine_state.setter
    def obd_engine_state(self, obd_engine_state):
        """Sets the obd_engine_state of this EquipmentStatsResponseData.


        :param obd_engine_state: The obd_engine_state of this EquipmentStatsResponseData.  # noqa: E501
        :type: EquipmentObdEngineState
        """

        self._obd_engine_state = obd_engine_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentStatsResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EquipmentStatsResponseData):
            return True

        return self.to_dict() != other.to_dict()
