# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class HosClocks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_break': 'HosBreak',
        'cycle': 'HosCycle',
        'drive': 'HosDrive',
        'shift': 'HosShift'
    }

    attribute_map = {
        '_break': 'break',
        'cycle': 'cycle',
        'drive': 'drive',
        'shift': 'shift'
    }

    def __init__(self, _break=None, cycle=None, drive=None, shift=None, local_vars_configuration=None):  # noqa: E501
        """HosClocks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__break = None
        self._cycle = None
        self._drive = None
        self._shift = None
        self.discriminator = None

        if _break is not None:
            self._break = _break
        if cycle is not None:
            self.cycle = cycle
        if drive is not None:
            self.drive = drive
        if shift is not None:
            self.shift = shift

    @property
    def _break(self):
        """Gets the _break of this HosClocks.  # noqa: E501


        :return: The _break of this HosClocks.  # noqa: E501
        :rtype: HosBreak
        """
        return self.__break

    @_break.setter
    def _break(self, _break):
        """Sets the _break of this HosClocks.


        :param _break: The _break of this HosClocks.  # noqa: E501
        :type: HosBreak
        """

        self.__break = _break

    @property
    def cycle(self):
        """Gets the cycle of this HosClocks.  # noqa: E501


        :return: The cycle of this HosClocks.  # noqa: E501
        :rtype: HosCycle
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this HosClocks.


        :param cycle: The cycle of this HosClocks.  # noqa: E501
        :type: HosCycle
        """

        self._cycle = cycle

    @property
    def drive(self):
        """Gets the drive of this HosClocks.  # noqa: E501


        :return: The drive of this HosClocks.  # noqa: E501
        :rtype: HosDrive
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this HosClocks.


        :param drive: The drive of this HosClocks.  # noqa: E501
        :type: HosDrive
        """

        self._drive = drive

    @property
    def shift(self):
        """Gets the shift of this HosClocks.  # noqa: E501


        :return: The shift of this HosClocks.  # noqa: E501
        :rtype: HosShift
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this HosClocks.


        :param shift: The shift of this HosClocks.  # noqa: E501
        :type: HosShift
        """

        self._shift = shift

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HosClocks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HosClocks):
            return True

        return self.to_dict() != other.to_dict()
