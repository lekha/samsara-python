# coding: utf-8

"""
    Samsara API

    Integrate your data with the Samsara API, customize the Samsara experience, and join a community of developers building with Samsara.  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class PaginationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_cursor': 'str',
        'has_next_page': 'bool'
    }

    attribute_map = {
        'end_cursor': 'endCursor',
        'has_next_page': 'hasNextPage'
    }

    def __init__(self, end_cursor=None, has_next_page=None, local_vars_configuration=None):  # noqa: E501
        """PaginationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_cursor = None
        self._has_next_page = None
        self.discriminator = None

        self.end_cursor = end_cursor
        self.has_next_page = has_next_page

    @property
    def end_cursor(self):
        """Gets the end_cursor of this PaginationResponse.  # noqa: E501

        Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter. This may be an empty string if there are no more pages left to view.  # noqa: E501

        :return: The end_cursor of this PaginationResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_cursor

    @end_cursor.setter
    def end_cursor(self, end_cursor):
        """Sets the end_cursor of this PaginationResponse.

        Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter. This may be an empty string if there are no more pages left to view.  # noqa: E501

        :param end_cursor: The end_cursor of this PaginationResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and end_cursor is None:  # noqa: E501
            raise ValueError("Invalid value for `end_cursor`, must not be `None`")  # noqa: E501

        self._end_cursor = end_cursor

    @property
    def has_next_page(self):
        """Gets the has_next_page of this PaginationResponse.  # noqa: E501

        True if there are more pages of results immediately available after this endCursor.  # noqa: E501

        :return: The has_next_page of this PaginationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this PaginationResponse.

        True if there are more pages of results immediately available after this endCursor.  # noqa: E501

        :param has_next_page: The has_next_page of this PaginationResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_next_page is None:  # noqa: E501
            raise ValueError("Invalid value for `has_next_page`, must not be `None`")  # noqa: E501

        self._has_next_page = has_next_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaginationResponse):
            return True

        return self.to_dict() != other.to_dict()
