# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class Equipment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_serial': 'str',
        'external_ids': 'dict(str, str)',
        'id': 'str',
        'installed_gateway': 'EquipmentInstalledGateway',
        'name': 'str',
        'notes': 'str',
        'tags': 'list[TagTinyResponse]'
    }

    attribute_map = {
        'asset_serial': 'assetSerial',
        'external_ids': 'externalIds',
        'id': 'id',
        'installed_gateway': 'installedGateway',
        'name': 'name',
        'notes': 'notes',
        'tags': 'tags'
    }

    def __init__(self, asset_serial=None, external_ids=None, id=None, installed_gateway=None, name=None, notes=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """Equipment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asset_serial = None
        self._external_ids = None
        self._id = None
        self._installed_gateway = None
        self._name = None
        self._notes = None
        self._tags = None
        self.discriminator = None

        if asset_serial is not None:
            self.asset_serial = asset_serial
        if external_ids is not None:
            self.external_ids = external_ids
        self.id = id
        if installed_gateway is not None:
            self.installed_gateway = installed_gateway
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if tags is not None:
            self.tags = tags

    @property
    def asset_serial(self):
        """Gets the asset_serial of this Equipment.  # noqa: E501

        An equipment identification number.  # noqa: E501

        :return: The asset_serial of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._asset_serial

    @asset_serial.setter
    def asset_serial(self, asset_serial):
        """Sets the asset_serial of this Equipment.

        An equipment identification number.  # noqa: E501

        :param asset_serial: The asset_serial of this Equipment.  # noqa: E501
        :type: str
        """

        self._asset_serial = asset_serial

    @property
    def external_ids(self):
        """Gets the external_ids of this Equipment.  # noqa: E501

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :return: The external_ids of this Equipment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this Equipment.

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :param external_ids: The external_ids of this Equipment.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_ids = external_ids

    @property
    def id(self):
        """Gets the id of this Equipment.  # noqa: E501

        Unique Samsara ID for the equipment.  # noqa: E501

        :return: The id of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Equipment.

        Unique Samsara ID for the equipment.  # noqa: E501

        :param id: The id of this Equipment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installed_gateway(self):
        """Gets the installed_gateway of this Equipment.  # noqa: E501


        :return: The installed_gateway of this Equipment.  # noqa: E501
        :rtype: EquipmentInstalledGateway
        """
        return self._installed_gateway

    @installed_gateway.setter
    def installed_gateway(self, installed_gateway):
        """Sets the installed_gateway of this Equipment.


        :param installed_gateway: The installed_gateway of this Equipment.  # noqa: E501
        :type: EquipmentInstalledGateway
        """

        self._installed_gateway = installed_gateway

    @property
    def name(self):
        """Gets the name of this Equipment.  # noqa: E501

        Name of the equipment.  # noqa: E501

        :return: The name of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Equipment.

        Name of the equipment.  # noqa: E501

        :param name: The name of this Equipment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Equipment.  # noqa: E501

        Notes about a piece of equipment. Samsara supports a maximum of 255 chars.  # noqa: E501

        :return: The notes of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Equipment.

        Notes about a piece of equipment. Samsara supports a maximum of 255 chars.  # noqa: E501

        :param notes: The notes of this Equipment.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes is not None and len(notes) > 255):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `255`")  # noqa: E501

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this Equipment.  # noqa: E501

        An array of all tag mini-objects that are associated with the given equipment.  # noqa: E501

        :return: The tags of this Equipment.  # noqa: E501
        :rtype: list[TagTinyResponse]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Equipment.

        An array of all tag mini-objects that are associated with the given equipment.  # noqa: E501

        :param tags: The tags of this Equipment.  # noqa: E501
        :type: list[TagTinyResponse]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Equipment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Equipment):
            return True

        return self.to_dict() != other.to_dict()
