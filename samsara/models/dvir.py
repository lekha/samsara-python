# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class Dvir(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_signature': 'DvirAuthorSignature',
        'end_time': 'str',
        'id': 'str',
        'license_plate': 'str',
        'location': 'str',
        'mechanic_notes': 'str',
        'odometer_meters': 'int',
        'safety_status': 'str',
        'second_signature': 'DvirSecondSignature',
        'start_time': 'str',
        'third_signature': 'DvirThirdSignature',
        'trailer': 'DvirTrailer',
        'trailer_defects': 'list[DvirTrailerDefectsItems]',
        'trailer_name': 'str',
        'type': 'str',
        'vehicle': 'DvirVehicle',
        'vehicle_defects': 'list[DvirTrailerDefectsItems]'
    }

    attribute_map = {
        'author_signature': 'authorSignature',
        'end_time': 'endTime',
        'id': 'id',
        'license_plate': 'licensePlate',
        'location': 'location',
        'mechanic_notes': 'mechanicNotes',
        'odometer_meters': 'odometerMeters',
        'safety_status': 'safetyStatus',
        'second_signature': 'secondSignature',
        'start_time': 'startTime',
        'third_signature': 'thirdSignature',
        'trailer': 'trailer',
        'trailer_defects': 'trailerDefects',
        'trailer_name': 'trailerName',
        'type': 'type',
        'vehicle': 'vehicle',
        'vehicle_defects': 'vehicleDefects'
    }

    def __init__(self, author_signature=None, end_time=None, id=None, license_plate=None, location=None, mechanic_notes=None, odometer_meters=None, safety_status='unsafe', second_signature=None, start_time=None, third_signature=None, trailer=None, trailer_defects=None, trailer_name=None, type='unspecified', vehicle=None, vehicle_defects=None, local_vars_configuration=None):  # noqa: E501
        """Dvir - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author_signature = None
        self._end_time = None
        self._id = None
        self._license_plate = None
        self._location = None
        self._mechanic_notes = None
        self._odometer_meters = None
        self._safety_status = None
        self._second_signature = None
        self._start_time = None
        self._third_signature = None
        self._trailer = None
        self._trailer_defects = None
        self._trailer_name = None
        self._type = None
        self._vehicle = None
        self._vehicle_defects = None
        self.discriminator = None

        if author_signature is not None:
            self.author_signature = author_signature
        if end_time is not None:
            self.end_time = end_time
        self.id = id
        if license_plate is not None:
            self.license_plate = license_plate
        if location is not None:
            self.location = location
        if mechanic_notes is not None:
            self.mechanic_notes = mechanic_notes
        if odometer_meters is not None:
            self.odometer_meters = odometer_meters
        if safety_status is not None:
            self.safety_status = safety_status
        if second_signature is not None:
            self.second_signature = second_signature
        if start_time is not None:
            self.start_time = start_time
        if third_signature is not None:
            self.third_signature = third_signature
        if trailer is not None:
            self.trailer = trailer
        if trailer_defects is not None:
            self.trailer_defects = trailer_defects
        if trailer_name is not None:
            self.trailer_name = trailer_name
        if type is not None:
            self.type = type
        if vehicle is not None:
            self.vehicle = vehicle
        if vehicle_defects is not None:
            self.vehicle_defects = vehicle_defects

    @property
    def author_signature(self):
        """Gets the author_signature of this Dvir.  # noqa: E501


        :return: The author_signature of this Dvir.  # noqa: E501
        :rtype: DvirAuthorSignature
        """
        return self._author_signature

    @author_signature.setter
    def author_signature(self, author_signature):
        """Sets the author_signature of this Dvir.


        :param author_signature: The author_signature of this Dvir.  # noqa: E501
        :type: DvirAuthorSignature
        """

        self._author_signature = author_signature

    @property
    def end_time(self):
        """Gets the end_time of this Dvir.  # noqa: E501

        Time when driver signed and completed this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :return: The end_time of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Dvir.

        Time when driver signed and completed this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :param end_time: The end_time of this Dvir.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this Dvir.  # noqa: E501

        Unique Samsara ID for the DVIR.  # noqa: E501

        :return: The id of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dvir.

        Unique Samsara ID for the DVIR.  # noqa: E501

        :param id: The id of this Dvir.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def license_plate(self):
        """Gets the license_plate of this Dvir.  # noqa: E501

        The license plate of this vehicle.  # noqa: E501

        :return: The license_plate of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this Dvir.

        The license plate of this vehicle.  # noqa: E501

        :param license_plate: The license_plate of this Dvir.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                license_plate is not None and len(license_plate) > 12):
            raise ValueError("Invalid value for `license_plate`, length must be less than or equal to `12`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def location(self):
        """Gets the location of this Dvir.  # noqa: E501

        Optional string if your jurisdiction requires a location of the DVIR.  # noqa: E501

        :return: The location of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Dvir.

        Optional string if your jurisdiction requires a location of the DVIR.  # noqa: E501

        :param location: The location of this Dvir.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mechanic_notes(self):
        """Gets the mechanic_notes of this Dvir.  # noqa: E501

        The mechanics notes on the DVIR.  # noqa: E501

        :return: The mechanic_notes of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._mechanic_notes

    @mechanic_notes.setter
    def mechanic_notes(self, mechanic_notes):
        """Sets the mechanic_notes of this Dvir.

        The mechanics notes on the DVIR.  # noqa: E501

        :param mechanic_notes: The mechanic_notes of this Dvir.  # noqa: E501
        :type: str
        """

        self._mechanic_notes = mechanic_notes

    @property
    def odometer_meters(self):
        """Gets the odometer_meters of this Dvir.  # noqa: E501

        The odometer reading in meters.  # noqa: E501

        :return: The odometer_meters of this Dvir.  # noqa: E501
        :rtype: int
        """
        return self._odometer_meters

    @odometer_meters.setter
    def odometer_meters(self, odometer_meters):
        """Sets the odometer_meters of this Dvir.

        The odometer reading in meters.  # noqa: E501

        :param odometer_meters: The odometer_meters of this Dvir.  # noqa: E501
        :type: int
        """

        self._odometer_meters = odometer_meters

    @property
    def safety_status(self):
        """Gets the safety_status of this Dvir.  # noqa: E501

        The condition of vehicle on which DVIR was done.  # noqa: E501

        :return: The safety_status of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._safety_status

    @safety_status.setter
    def safety_status(self, safety_status):
        """Sets the safety_status of this Dvir.

        The condition of vehicle on which DVIR was done.  # noqa: E501

        :param safety_status: The safety_status of this Dvir.  # noqa: E501
        :type: str
        """
        allowed_values = ["safe", "unsafe", "resolved"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and safety_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `safety_status` ({0}), must be one of {1}"  # noqa: E501
                .format(safety_status, allowed_values)
            )

        self._safety_status = safety_status

    @property
    def second_signature(self):
        """Gets the second_signature of this Dvir.  # noqa: E501


        :return: The second_signature of this Dvir.  # noqa: E501
        :rtype: DvirSecondSignature
        """
        return self._second_signature

    @second_signature.setter
    def second_signature(self, second_signature):
        """Sets the second_signature of this Dvir.


        :param second_signature: The second_signature of this Dvir.  # noqa: E501
        :type: DvirSecondSignature
        """

        self._second_signature = second_signature

    @property
    def start_time(self):
        """Gets the start_time of this Dvir.  # noqa: E501

        Time when driver began filling out this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :return: The start_time of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Dvir.

        Time when driver began filling out this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :param start_time: The start_time of this Dvir.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def third_signature(self):
        """Gets the third_signature of this Dvir.  # noqa: E501


        :return: The third_signature of this Dvir.  # noqa: E501
        :rtype: DvirThirdSignature
        """
        return self._third_signature

    @third_signature.setter
    def third_signature(self, third_signature):
        """Sets the third_signature of this Dvir.


        :param third_signature: The third_signature of this Dvir.  # noqa: E501
        :type: DvirThirdSignature
        """

        self._third_signature = third_signature

    @property
    def trailer(self):
        """Gets the trailer of this Dvir.  # noqa: E501


        :return: The trailer of this Dvir.  # noqa: E501
        :rtype: DvirTrailer
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this Dvir.


        :param trailer: The trailer of this Dvir.  # noqa: E501
        :type: DvirTrailer
        """

        self._trailer = trailer

    @property
    def trailer_defects(self):
        """Gets the trailer_defects of this Dvir.  # noqa: E501

        Defects registered for the trailer which was part of the DVIR.  # noqa: E501

        :return: The trailer_defects of this Dvir.  # noqa: E501
        :rtype: list[DvirTrailerDefectsItems]
        """
        return self._trailer_defects

    @trailer_defects.setter
    def trailer_defects(self, trailer_defects):
        """Sets the trailer_defects of this Dvir.

        Defects registered for the trailer which was part of the DVIR.  # noqa: E501

        :param trailer_defects: The trailer_defects of this Dvir.  # noqa: E501
        :type: list[DvirTrailerDefectsItems]
        """

        self._trailer_defects = trailer_defects

    @property
    def trailer_name(self):
        """Gets the trailer_name of this Dvir.  # noqa: E501

        The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs.  # noqa: E501

        :return: The trailer_name of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._trailer_name

    @trailer_name.setter
    def trailer_name(self, trailer_name):
        """Sets the trailer_name of this Dvir.

        The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs.  # noqa: E501

        :param trailer_name: The trailer_name of this Dvir.  # noqa: E501
        :type: str
        """

        self._trailer_name = trailer_name

    @property
    def type(self):
        """Gets the type of this Dvir.  # noqa: E501

        Inspection type of the DVIR.  # noqa: E501

        :return: The type of this Dvir.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dvir.

        Inspection type of the DVIR.  # noqa: E501

        :param type: The type of this Dvir.  # noqa: E501
        :type: str
        """
        allowed_values = ["preTrip", "postTrip", "mechanic", "unspecified"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vehicle(self):
        """Gets the vehicle of this Dvir.  # noqa: E501


        :return: The vehicle of this Dvir.  # noqa: E501
        :rtype: DvirVehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this Dvir.


        :param vehicle: The vehicle of this Dvir.  # noqa: E501
        :type: DvirVehicle
        """

        self._vehicle = vehicle

    @property
    def vehicle_defects(self):
        """Gets the vehicle_defects of this Dvir.  # noqa: E501

        Defects registered for the vehicle which was part of the DVIR.  # noqa: E501

        :return: The vehicle_defects of this Dvir.  # noqa: E501
        :rtype: list[DvirTrailerDefectsItems]
        """
        return self._vehicle_defects

    @vehicle_defects.setter
    def vehicle_defects(self, vehicle_defects):
        """Sets the vehicle_defects of this Dvir.

        Defects registered for the vehicle which was part of the DVIR.  # noqa: E501

        :param vehicle_defects: The vehicle_defects of this Dvir.  # noqa: E501
        :type: list[DvirTrailerDefectsItems]
        """

        self._vehicle_defects = vehicle_defects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dvir):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dvir):
            return True

        return self.to_dict() != other.to_dict()
