# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleStatsFaultCodesJ1939TroubleCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fmi_description': 'str',
        'fmi_id': 'int',
        'mil_status': 'int',
        'occurrence_count': 'int',
        'source_address_name': 'str',
        'spn_description': 'str',
        'spn_id': 'int',
        'tx_id': 'int',
        'vendor_specific_fields': 'VehicleStatsFaultCodesVendorSpecificFields'
    }

    attribute_map = {
        'fmi_description': 'fmiDescription',
        'fmi_id': 'fmiId',
        'mil_status': 'milStatus',
        'occurrence_count': 'occurrenceCount',
        'source_address_name': 'sourceAddressName',
        'spn_description': 'spnDescription',
        'spn_id': 'spnId',
        'tx_id': 'txId',
        'vendor_specific_fields': 'vendorSpecificFields'
    }

    def __init__(self, fmi_description=None, fmi_id=None, mil_status=None, occurrence_count=None, source_address_name=None, spn_description=None, spn_id=None, tx_id=None, vendor_specific_fields=None, local_vars_configuration=None):  # noqa: E501
        """VehicleStatsFaultCodesJ1939TroubleCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fmi_description = None
        self._fmi_id = None
        self._mil_status = None
        self._occurrence_count = None
        self._source_address_name = None
        self._spn_description = None
        self._spn_id = None
        self._tx_id = None
        self._vendor_specific_fields = None
        self.discriminator = None

        if fmi_description is not None:
            self.fmi_description = fmi_description
        self.fmi_id = fmi_id
        self.mil_status = mil_status
        self.occurrence_count = occurrence_count
        if source_address_name is not None:
            self.source_address_name = source_address_name
        if spn_description is not None:
            self.spn_description = spn_description
        self.spn_id = spn_id
        self.tx_id = tx_id
        if vendor_specific_fields is not None:
            self.vendor_specific_fields = vendor_specific_fields

    @property
    def fmi_description(self):
        """Gets the fmi_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        A short description of the FMI identifier, if available.  # noqa: E501

        :return: The fmi_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: str
        """
        return self._fmi_description

    @fmi_description.setter
    def fmi_description(self, fmi_description):
        """Sets the fmi_description of this VehicleStatsFaultCodesJ1939TroubleCode.

        A short description of the FMI identifier, if available.  # noqa: E501

        :param fmi_description: The fmi_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: str
        """

        self._fmi_description = fmi_description

    @property
    def fmi_id(self):
        """Gets the fmi_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The FMI identifier.  # noqa: E501

        :return: The fmi_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._fmi_id

    @fmi_id.setter
    def fmi_id(self, fmi_id):
        """Sets the fmi_id of this VehicleStatsFaultCodesJ1939TroubleCode.

        The FMI identifier.  # noqa: E501

        :param fmi_id: The fmi_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and fmi_id is None:  # noqa: E501
            raise ValueError("Invalid value for `fmi_id`, must not be `None`")  # noqa: E501

        self._fmi_id = fmi_id

    @property
    def mil_status(self):
        """Gets the mil_status of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The MIL status, indicating a check engine light.  # noqa: E501

        :return: The mil_status of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._mil_status

    @mil_status.setter
    def mil_status(self, mil_status):
        """Sets the mil_status of this VehicleStatsFaultCodesJ1939TroubleCode.

        The MIL status, indicating a check engine light.  # noqa: E501

        :param mil_status: The mil_status of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and mil_status is None:  # noqa: E501
            raise ValueError("Invalid value for `mil_status`, must not be `None`")  # noqa: E501

        self._mil_status = mil_status

    @property
    def occurrence_count(self):
        """Gets the occurrence_count of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The number of times this fault has triggered.  # noqa: E501

        :return: The occurrence_count of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._occurrence_count

    @occurrence_count.setter
    def occurrence_count(self, occurrence_count):
        """Sets the occurrence_count of this VehicleStatsFaultCodesJ1939TroubleCode.

        The number of times this fault has triggered.  # noqa: E501

        :param occurrence_count: The occurrence_count of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and occurrence_count is None:  # noqa: E501
            raise ValueError("Invalid value for `occurrence_count`, must not be `None`")  # noqa: E501

        self._occurrence_count = occurrence_count

    @property
    def source_address_name(self):
        """Gets the source_address_name of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The source address name corresponding to the txId  # noqa: E501

        :return: The source_address_name of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: str
        """
        return self._source_address_name

    @source_address_name.setter
    def source_address_name(self, source_address_name):
        """Sets the source_address_name of this VehicleStatsFaultCodesJ1939TroubleCode.

        The source address name corresponding to the txId  # noqa: E501

        :param source_address_name: The source_address_name of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: str
        """

        self._source_address_name = source_address_name

    @property
    def spn_description(self):
        """Gets the spn_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        A short description of the SPN identifier, if available.  # noqa: E501

        :return: The spn_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: str
        """
        return self._spn_description

    @spn_description.setter
    def spn_description(self, spn_description):
        """Sets the spn_description of this VehicleStatsFaultCodesJ1939TroubleCode.

        A short description of the SPN identifier, if available.  # noqa: E501

        :param spn_description: The spn_description of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: str
        """

        self._spn_description = spn_description

    @property
    def spn_id(self):
        """Gets the spn_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The SPN identifier.  # noqa: E501

        :return: The spn_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._spn_id

    @spn_id.setter
    def spn_id(self, spn_id):
        """Sets the spn_id of this VehicleStatsFaultCodesJ1939TroubleCode.

        The SPN identifier.  # noqa: E501

        :param spn_id: The spn_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and spn_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spn_id`, must not be `None`")  # noqa: E501

        self._spn_id = spn_id

    @property
    def tx_id(self):
        """Gets the tx_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501

        The TX identifier.  # noqa: E501

        :return: The tx_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this VehicleStatsFaultCodesJ1939TroubleCode.

        The TX identifier.  # noqa: E501

        :param tx_id: The tx_id of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tx_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    @property
    def vendor_specific_fields(self):
        """Gets the vendor_specific_fields of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501


        :return: The vendor_specific_fields of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :rtype: VehicleStatsFaultCodesVendorSpecificFields
        """
        return self._vendor_specific_fields

    @vendor_specific_fields.setter
    def vendor_specific_fields(self, vendor_specific_fields):
        """Sets the vendor_specific_fields of this VehicleStatsFaultCodesJ1939TroubleCode.


        :param vendor_specific_fields: The vendor_specific_fields of this VehicleStatsFaultCodesJ1939TroubleCode.  # noqa: E501
        :type: VehicleStatsFaultCodesVendorSpecificFields
        """

        self._vendor_specific_fields = vendor_specific_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleStatsFaultCodesJ1939TroubleCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleStatsFaultCodesJ1939TroubleCode):
            return True

        return self.to_dict() != other.to_dict()
