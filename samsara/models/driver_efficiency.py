# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverEfficiency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver': 'ExtendedDriverTinyResponse',
        'total_distance_driven_meters': 'float',
        'total_drive_time_duration_ms': 'float',
        'total_fuel_consumed_ml': 'float',
        'total_idle_time_duration_ms': 'float',
        'total_power_take_off_duration_ms': 'float',
        'vehicle_summaries': 'list[VehicleSummary]'
    }

    attribute_map = {
        'driver': 'driver',
        'total_distance_driven_meters': 'totalDistanceDrivenMeters',
        'total_drive_time_duration_ms': 'totalDriveTimeDurationMs',
        'total_fuel_consumed_ml': 'totalFuelConsumedMl',
        'total_idle_time_duration_ms': 'totalIdleTimeDurationMs',
        'total_power_take_off_duration_ms': 'totalPowerTakeOffDurationMs',
        'vehicle_summaries': 'vehicleSummaries'
    }

    def __init__(self, driver=None, total_distance_driven_meters=None, total_drive_time_duration_ms=None, total_fuel_consumed_ml=None, total_idle_time_duration_ms=None, total_power_take_off_duration_ms=None, vehicle_summaries=None, local_vars_configuration=None):  # noqa: E501
        """DriverEfficiency - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver = None
        self._total_distance_driven_meters = None
        self._total_drive_time_duration_ms = None
        self._total_fuel_consumed_ml = None
        self._total_idle_time_duration_ms = None
        self._total_power_take_off_duration_ms = None
        self._vehicle_summaries = None
        self.discriminator = None

        if driver is not None:
            self.driver = driver
        if total_distance_driven_meters is not None:
            self.total_distance_driven_meters = total_distance_driven_meters
        if total_drive_time_duration_ms is not None:
            self.total_drive_time_duration_ms = total_drive_time_duration_ms
        if total_fuel_consumed_ml is not None:
            self.total_fuel_consumed_ml = total_fuel_consumed_ml
        if total_idle_time_duration_ms is not None:
            self.total_idle_time_duration_ms = total_idle_time_duration_ms
        if total_power_take_off_duration_ms is not None:
            self.total_power_take_off_duration_ms = total_power_take_off_duration_ms
        if vehicle_summaries is not None:
            self.vehicle_summaries = vehicle_summaries

    @property
    def driver(self):
        """Gets the driver of this DriverEfficiency.  # noqa: E501


        :return: The driver of this DriverEfficiency.  # noqa: E501
        :rtype: ExtendedDriverTinyResponse
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this DriverEfficiency.


        :param driver: The driver of this DriverEfficiency.  # noqa: E501
        :type: ExtendedDriverTinyResponse
        """

        self._driver = driver

    @property
    def total_distance_driven_meters(self):
        """Gets the total_distance_driven_meters of this DriverEfficiency.  # noqa: E501

        Distance driven in meters.  # noqa: E501

        :return: The total_distance_driven_meters of this DriverEfficiency.  # noqa: E501
        :rtype: float
        """
        return self._total_distance_driven_meters

    @total_distance_driven_meters.setter
    def total_distance_driven_meters(self, total_distance_driven_meters):
        """Sets the total_distance_driven_meters of this DriverEfficiency.

        Distance driven in meters.  # noqa: E501

        :param total_distance_driven_meters: The total_distance_driven_meters of this DriverEfficiency.  # noqa: E501
        :type: float
        """

        self._total_distance_driven_meters = total_distance_driven_meters

    @property
    def total_drive_time_duration_ms(self):
        """Gets the total_drive_time_duration_ms of this DriverEfficiency.  # noqa: E501

        Time driven in milliseconds.  # noqa: E501

        :return: The total_drive_time_duration_ms of this DriverEfficiency.  # noqa: E501
        :rtype: float
        """
        return self._total_drive_time_duration_ms

    @total_drive_time_duration_ms.setter
    def total_drive_time_duration_ms(self, total_drive_time_duration_ms):
        """Sets the total_drive_time_duration_ms of this DriverEfficiency.

        Time driven in milliseconds.  # noqa: E501

        :param total_drive_time_duration_ms: The total_drive_time_duration_ms of this DriverEfficiency.  # noqa: E501
        :type: float
        """

        self._total_drive_time_duration_ms = total_drive_time_duration_ms

    @property
    def total_fuel_consumed_ml(self):
        """Gets the total_fuel_consumed_ml of this DriverEfficiency.  # noqa: E501

        Fuel consumption in milliliters.  # noqa: E501

        :return: The total_fuel_consumed_ml of this DriverEfficiency.  # noqa: E501
        :rtype: float
        """
        return self._total_fuel_consumed_ml

    @total_fuel_consumed_ml.setter
    def total_fuel_consumed_ml(self, total_fuel_consumed_ml):
        """Sets the total_fuel_consumed_ml of this DriverEfficiency.

        Fuel consumption in milliliters.  # noqa: E501

        :param total_fuel_consumed_ml: The total_fuel_consumed_ml of this DriverEfficiency.  # noqa: E501
        :type: float
        """

        self._total_fuel_consumed_ml = total_fuel_consumed_ml

    @property
    def total_idle_time_duration_ms(self):
        """Gets the total_idle_time_duration_ms of this DriverEfficiency.  # noqa: E501

        Time spent idling in milliseconds.  # noqa: E501

        :return: The total_idle_time_duration_ms of this DriverEfficiency.  # noqa: E501
        :rtype: float
        """
        return self._total_idle_time_duration_ms

    @total_idle_time_duration_ms.setter
    def total_idle_time_duration_ms(self, total_idle_time_duration_ms):
        """Sets the total_idle_time_duration_ms of this DriverEfficiency.

        Time spent idling in milliseconds.  # noqa: E501

        :param total_idle_time_duration_ms: The total_idle_time_duration_ms of this DriverEfficiency.  # noqa: E501
        :type: float
        """

        self._total_idle_time_duration_ms = total_idle_time_duration_ms

    @property
    def total_power_take_off_duration_ms(self):
        """Gets the total_power_take_off_duration_ms of this DriverEfficiency.  # noqa: E501

        Time spent with power take off enabled while idling in milliseconds.  # noqa: E501

        :return: The total_power_take_off_duration_ms of this DriverEfficiency.  # noqa: E501
        :rtype: float
        """
        return self._total_power_take_off_duration_ms

    @total_power_take_off_duration_ms.setter
    def total_power_take_off_duration_ms(self, total_power_take_off_duration_ms):
        """Sets the total_power_take_off_duration_ms of this DriverEfficiency.

        Time spent with power take off enabled while idling in milliseconds.  # noqa: E501

        :param total_power_take_off_duration_ms: The total_power_take_off_duration_ms of this DriverEfficiency.  # noqa: E501
        :type: float
        """

        self._total_power_take_off_duration_ms = total_power_take_off_duration_ms

    @property
    def vehicle_summaries(self):
        """Gets the vehicle_summaries of this DriverEfficiency.  # noqa: E501

        Summaries of vehicle efficiency for each vehicle the driver was driving during the given time period.  # noqa: E501

        :return: The vehicle_summaries of this DriverEfficiency.  # noqa: E501
        :rtype: list[VehicleSummary]
        """
        return self._vehicle_summaries

    @vehicle_summaries.setter
    def vehicle_summaries(self, vehicle_summaries):
        """Sets the vehicle_summaries of this DriverEfficiency.

        Summaries of vehicle efficiency for each vehicle the driver was driving during the given time period.  # noqa: E501

        :param vehicle_summaries: The vehicle_summaries of this DriverEfficiency.  # noqa: E501
        :type: list[VehicleSummary]
        """

        self._vehicle_summaries = vehicle_summaries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverEfficiency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverEfficiency):
            return True

        return self.to_dict() != other.to_dict()
