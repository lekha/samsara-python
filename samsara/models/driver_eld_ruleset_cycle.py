# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverEldRulesetCycle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    USA_60_HOUR_7_DAY = "USA 60 hour / 7 day"
    USA_70_HOUR_8_DAY = "USA 70 hour / 8 day"
    AK_80_HOUR_8_DAY = "AK 80 hour / 8 day"
    AK_70_HOUR_7_DAY = "AK 70 hour / 7 day"
    CA_80_HOUR_8_DAY = "CA 80 hour / 8 day"
    CA_112_HOUR_8_DAY = "CA 112 hour / 8 day"
    FL_80_HOUR_8_DAY = "FL 80 hour / 8 day"
    FL_70_HOUR_7_DAY = "FL 70 hour / 7 day"
    NE_80_HOUR_8_DAY = "NE 80 hour / 8 day"
    NE_70_HOUR_7_DAY = "NE 70 hour / 7 day"
    NC_80_HOUR_8_DAY = "NC 80 hour / 8 day"
    NC_70_HOUR_7_DAY = "NC 70 hour / 7 day"
    OK_70_HOUR_8_DAY = "OK 70 hour / 8 day"
    OK_60_HOUR_7_DAY = "OK 60 hour / 7 day"
    OR_80_HOUR_8_DAY = "OR 80 hour / 8 day"
    OR_70_HOUR_7_DAY = "OR 70 hour / 7 day"
    SC_80_HOUR_8_DAY = "SC 80 hour / 8 day"
    SC_70_HOUR_7_DAY = "SC 70 hour / 7 day"
    TX_70_HOUR_7_DAY = "TX 70 hour / 7 day"
    WI_80_HOUR_8_DAY = "WI 80 hour / 8 day"
    WI_70_HOUR_7_DAY = "WI 70 hour / 7 day"
    CANADA_SOUTH_CYCLE_1_70_HOUR_7_DAY_ = "Canada South Cycle 1 (70 hour / 7 day)"
    CANADA_SOUTH_CYCLE_2_120_HOUR_14_DAY_ = "Canada South Cycle 2 (120 hour / 14 day)"
    CANADA_NORTH_CYCLE_1_80_HOUR_7_DAY_ = "Canada North Cycle 1 (80 hour / 7 day)"
    CANADA_NORTH_CYCLE_2_120_HOUR_14_DAY_ = "Canada North Cycle 2 (120 hour / 14 day)"

    allowable_values = [USA_60_HOUR_7_DAY, USA_70_HOUR_8_DAY, AK_80_HOUR_8_DAY, AK_70_HOUR_7_DAY, CA_80_HOUR_8_DAY, CA_112_HOUR_8_DAY, FL_80_HOUR_8_DAY, FL_70_HOUR_7_DAY, NE_80_HOUR_8_DAY, NE_70_HOUR_7_DAY, NC_80_HOUR_8_DAY, NC_70_HOUR_7_DAY, OK_70_HOUR_8_DAY, OK_60_HOUR_7_DAY, OR_80_HOUR_8_DAY, OR_70_HOUR_7_DAY, SC_80_HOUR_8_DAY, SC_70_HOUR_7_DAY, TX_70_HOUR_7_DAY, WI_80_HOUR_8_DAY, WI_70_HOUR_7_DAY, CANADA_SOUTH_CYCLE_1_70_HOUR_7_DAY_, CANADA_SOUTH_CYCLE_2_120_HOUR_14_DAY_, CANADA_NORTH_CYCLE_1_80_HOUR_7_DAY_, CANADA_NORTH_CYCLE_2_120_HOUR_14_DAY_]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """DriverEldRulesetCycle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverEldRulesetCycle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverEldRulesetCycle):
            return True

        return self.to_dict() != other.to_dict()
