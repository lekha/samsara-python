# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleStatsFaultCodesOBDIITroubleCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'confirmed_dtcs': 'list[VehicleStatsFaultCodesPassengerDtc]',
        'ignition_type': 'VehicleStatsFaultCodesIgnitionType',
        'mil_status': 'bool',
        'monitor_status': 'VehicleStatsFaultCodesPassengerMonitorStatus',
        'pending_dtcs': 'list[VehicleStatsFaultCodesPassengerDtc]',
        'permanent_dtcs': 'list[VehicleStatsFaultCodesPassengerDtc]',
        'tx_id': 'int'
    }

    attribute_map = {
        'confirmed_dtcs': 'confirmedDtcs',
        'ignition_type': 'ignitionType',
        'mil_status': 'milStatus',
        'monitor_status': 'monitorStatus',
        'pending_dtcs': 'pendingDtcs',
        'permanent_dtcs': 'permanentDtcs',
        'tx_id': 'txId'
    }

    def __init__(self, confirmed_dtcs=None, ignition_type=None, mil_status=None, monitor_status=None, pending_dtcs=None, permanent_dtcs=None, tx_id=None, local_vars_configuration=None):  # noqa: E501
        """VehicleStatsFaultCodesOBDIITroubleCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._confirmed_dtcs = None
        self._ignition_type = None
        self._mil_status = None
        self._monitor_status = None
        self._pending_dtcs = None
        self._permanent_dtcs = None
        self._tx_id = None
        self.discriminator = None

        if confirmed_dtcs is not None:
            self.confirmed_dtcs = confirmed_dtcs
        if ignition_type is not None:
            self.ignition_type = ignition_type
        if mil_status is not None:
            self.mil_status = mil_status
        if monitor_status is not None:
            self.monitor_status = monitor_status
        if pending_dtcs is not None:
            self.pending_dtcs = pending_dtcs
        if permanent_dtcs is not None:
            self.permanent_dtcs = permanent_dtcs
        self.tx_id = tx_id

    @property
    def confirmed_dtcs(self):
        """Gets the confirmed_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501

        Confirmed DTC codes.  # noqa: E501

        :return: The confirmed_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: list[VehicleStatsFaultCodesPassengerDtc]
        """
        return self._confirmed_dtcs

    @confirmed_dtcs.setter
    def confirmed_dtcs(self, confirmed_dtcs):
        """Sets the confirmed_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.

        Confirmed DTC codes.  # noqa: E501

        :param confirmed_dtcs: The confirmed_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: list[VehicleStatsFaultCodesPassengerDtc]
        """

        self._confirmed_dtcs = confirmed_dtcs

    @property
    def ignition_type(self):
        """Gets the ignition_type of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501


        :return: The ignition_type of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: VehicleStatsFaultCodesIgnitionType
        """
        return self._ignition_type

    @ignition_type.setter
    def ignition_type(self, ignition_type):
        """Sets the ignition_type of this VehicleStatsFaultCodesOBDIITroubleCode.


        :param ignition_type: The ignition_type of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: VehicleStatsFaultCodesIgnitionType
        """

        self._ignition_type = ignition_type

    @property
    def mil_status(self):
        """Gets the mil_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501

        The MIL status, indicating a check engine light.  # noqa: E501

        :return: The mil_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: bool
        """
        return self._mil_status

    @mil_status.setter
    def mil_status(self, mil_status):
        """Sets the mil_status of this VehicleStatsFaultCodesOBDIITroubleCode.

        The MIL status, indicating a check engine light.  # noqa: E501

        :param mil_status: The mil_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: bool
        """

        self._mil_status = mil_status

    @property
    def monitor_status(self):
        """Gets the monitor_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501


        :return: The monitor_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: VehicleStatsFaultCodesPassengerMonitorStatus
        """
        return self._monitor_status

    @monitor_status.setter
    def monitor_status(self, monitor_status):
        """Sets the monitor_status of this VehicleStatsFaultCodesOBDIITroubleCode.


        :param monitor_status: The monitor_status of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: VehicleStatsFaultCodesPassengerMonitorStatus
        """

        self._monitor_status = monitor_status

    @property
    def pending_dtcs(self):
        """Gets the pending_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501

        Pending DTC codes.  # noqa: E501

        :return: The pending_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: list[VehicleStatsFaultCodesPassengerDtc]
        """
        return self._pending_dtcs

    @pending_dtcs.setter
    def pending_dtcs(self, pending_dtcs):
        """Sets the pending_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.

        Pending DTC codes.  # noqa: E501

        :param pending_dtcs: The pending_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: list[VehicleStatsFaultCodesPassengerDtc]
        """

        self._pending_dtcs = pending_dtcs

    @property
    def permanent_dtcs(self):
        """Gets the permanent_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501

        Permanent DTC codes.  # noqa: E501

        :return: The permanent_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: list[VehicleStatsFaultCodesPassengerDtc]
        """
        return self._permanent_dtcs

    @permanent_dtcs.setter
    def permanent_dtcs(self, permanent_dtcs):
        """Sets the permanent_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.

        Permanent DTC codes.  # noqa: E501

        :param permanent_dtcs: The permanent_dtcs of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: list[VehicleStatsFaultCodesPassengerDtc]
        """

        self._permanent_dtcs = permanent_dtcs

    @property
    def tx_id(self):
        """Gets the tx_id of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501

        The TX identifier.  # noqa: E501

        :return: The tx_id of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this VehicleStatsFaultCodesOBDIITroubleCode.

        The TX identifier.  # noqa: E501

        :param tx_id: The tx_id of this VehicleStatsFaultCodesOBDIITroubleCode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tx_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleStatsFaultCodesOBDIITroubleCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleStatsFaultCodesOBDIITroubleCode):
            return True

        return self.to_dict() != other.to_dict()
