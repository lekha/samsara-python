# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleStatsListResponseObdiiConfirmedDtcs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dtc_description': 'str',
        'dtc_id': 'int',
        'dtc_short_code': 'str'
    }

    attribute_map = {
        'dtc_description': 'dtcDescription',
        'dtc_id': 'dtcId',
        'dtc_short_code': 'dtcShortCode'
    }

    def __init__(self, dtc_description=None, dtc_id=None, dtc_short_code=None, local_vars_configuration=None):  # noqa: E501
        """VehicleStatsListResponseObdiiConfirmedDtcs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dtc_description = None
        self._dtc_id = None
        self._dtc_short_code = None
        self.discriminator = None

        if dtc_description is not None:
            self.dtc_description = dtc_description
        self.dtc_id = dtc_id
        if dtc_short_code is not None:
            self.dtc_short_code = dtc_short_code

    @property
    def dtc_description(self):
        """Gets the dtc_description of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501

        The DTC description, if available.  # noqa: E501

        :return: The dtc_description of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :rtype: str
        """
        return self._dtc_description

    @dtc_description.setter
    def dtc_description(self, dtc_description):
        """Sets the dtc_description of this VehicleStatsListResponseObdiiConfirmedDtcs.

        The DTC description, if available.  # noqa: E501

        :param dtc_description: The dtc_description of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :type: str
        """

        self._dtc_description = dtc_description

    @property
    def dtc_id(self):
        """Gets the dtc_id of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501

        The DTC identifier.  # noqa: E501

        :return: The dtc_id of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :rtype: int
        """
        return self._dtc_id

    @dtc_id.setter
    def dtc_id(self, dtc_id):
        """Sets the dtc_id of this VehicleStatsListResponseObdiiConfirmedDtcs.

        The DTC identifier.  # noqa: E501

        :param dtc_id: The dtc_id of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and dtc_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dtc_id`, must not be `None`")  # noqa: E501

        self._dtc_id = dtc_id

    @property
    def dtc_short_code(self):
        """Gets the dtc_short_code of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501

        The DTC short code, if available.  # noqa: E501

        :return: The dtc_short_code of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :rtype: str
        """
        return self._dtc_short_code

    @dtc_short_code.setter
    def dtc_short_code(self, dtc_short_code):
        """Sets the dtc_short_code of this VehicleStatsListResponseObdiiConfirmedDtcs.

        The DTC short code, if available.  # noqa: E501

        :param dtc_short_code: The dtc_short_code of this VehicleStatsListResponseObdiiConfirmedDtcs.  # noqa: E501
        :type: str
        """

        self._dtc_short_code = dtc_short_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleStatsListResponseObdiiConfirmedDtcs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleStatsListResponseObdiiConfirmedDtcs):
            return True

        return self.to_dict() != other.to_dict()
