# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance_driven_meters': 'float',
        'drive_time_duration_ms': 'float',
        'fuel_consumed_ml': 'float',
        'idle_time_duration_ms': 'float',
        'power_take_off_duration_ms': 'float',
        'vehicle': 'VehicleTinyResponse'
    }

    attribute_map = {
        'distance_driven_meters': 'distanceDrivenMeters',
        'drive_time_duration_ms': 'driveTimeDurationMs',
        'fuel_consumed_ml': 'fuelConsumedMl',
        'idle_time_duration_ms': 'idleTimeDurationMs',
        'power_take_off_duration_ms': 'powerTakeOffDurationMs',
        'vehicle': 'vehicle'
    }

    def __init__(self, distance_driven_meters=None, drive_time_duration_ms=None, fuel_consumed_ml=None, idle_time_duration_ms=None, power_take_off_duration_ms=None, vehicle=None, local_vars_configuration=None):  # noqa: E501
        """VehicleSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._distance_driven_meters = None
        self._drive_time_duration_ms = None
        self._fuel_consumed_ml = None
        self._idle_time_duration_ms = None
        self._power_take_off_duration_ms = None
        self._vehicle = None
        self.discriminator = None

        if distance_driven_meters is not None:
            self.distance_driven_meters = distance_driven_meters
        if drive_time_duration_ms is not None:
            self.drive_time_duration_ms = drive_time_duration_ms
        if fuel_consumed_ml is not None:
            self.fuel_consumed_ml = fuel_consumed_ml
        if idle_time_duration_ms is not None:
            self.idle_time_duration_ms = idle_time_duration_ms
        if power_take_off_duration_ms is not None:
            self.power_take_off_duration_ms = power_take_off_duration_ms
        if vehicle is not None:
            self.vehicle = vehicle

    @property
    def distance_driven_meters(self):
        """Gets the distance_driven_meters of this VehicleSummary.  # noqa: E501

        Distance driven in meters.  # noqa: E501

        :return: The distance_driven_meters of this VehicleSummary.  # noqa: E501
        :rtype: float
        """
        return self._distance_driven_meters

    @distance_driven_meters.setter
    def distance_driven_meters(self, distance_driven_meters):
        """Sets the distance_driven_meters of this VehicleSummary.

        Distance driven in meters.  # noqa: E501

        :param distance_driven_meters: The distance_driven_meters of this VehicleSummary.  # noqa: E501
        :type: float
        """

        self._distance_driven_meters = distance_driven_meters

    @property
    def drive_time_duration_ms(self):
        """Gets the drive_time_duration_ms of this VehicleSummary.  # noqa: E501

        Time driven in milliseconds.  # noqa: E501

        :return: The drive_time_duration_ms of this VehicleSummary.  # noqa: E501
        :rtype: float
        """
        return self._drive_time_duration_ms

    @drive_time_duration_ms.setter
    def drive_time_duration_ms(self, drive_time_duration_ms):
        """Sets the drive_time_duration_ms of this VehicleSummary.

        Time driven in milliseconds.  # noqa: E501

        :param drive_time_duration_ms: The drive_time_duration_ms of this VehicleSummary.  # noqa: E501
        :type: float
        """

        self._drive_time_duration_ms = drive_time_duration_ms

    @property
    def fuel_consumed_ml(self):
        """Gets the fuel_consumed_ml of this VehicleSummary.  # noqa: E501

        Fuel consumption in milliliters.  # noqa: E501

        :return: The fuel_consumed_ml of this VehicleSummary.  # noqa: E501
        :rtype: float
        """
        return self._fuel_consumed_ml

    @fuel_consumed_ml.setter
    def fuel_consumed_ml(self, fuel_consumed_ml):
        """Sets the fuel_consumed_ml of this VehicleSummary.

        Fuel consumption in milliliters.  # noqa: E501

        :param fuel_consumed_ml: The fuel_consumed_ml of this VehicleSummary.  # noqa: E501
        :type: float
        """

        self._fuel_consumed_ml = fuel_consumed_ml

    @property
    def idle_time_duration_ms(self):
        """Gets the idle_time_duration_ms of this VehicleSummary.  # noqa: E501

        Time spent idling in milliseconds.  # noqa: E501

        :return: The idle_time_duration_ms of this VehicleSummary.  # noqa: E501
        :rtype: float
        """
        return self._idle_time_duration_ms

    @idle_time_duration_ms.setter
    def idle_time_duration_ms(self, idle_time_duration_ms):
        """Sets the idle_time_duration_ms of this VehicleSummary.

        Time spent idling in milliseconds.  # noqa: E501

        :param idle_time_duration_ms: The idle_time_duration_ms of this VehicleSummary.  # noqa: E501
        :type: float
        """

        self._idle_time_duration_ms = idle_time_duration_ms

    @property
    def power_take_off_duration_ms(self):
        """Gets the power_take_off_duration_ms of this VehicleSummary.  # noqa: E501

        Time spent with power take off enabled while idling in milliseconds.  # noqa: E501

        :return: The power_take_off_duration_ms of this VehicleSummary.  # noqa: E501
        :rtype: float
        """
        return self._power_take_off_duration_ms

    @power_take_off_duration_ms.setter
    def power_take_off_duration_ms(self, power_take_off_duration_ms):
        """Sets the power_take_off_duration_ms of this VehicleSummary.

        Time spent with power take off enabled while idling in milliseconds.  # noqa: E501

        :param power_take_off_duration_ms: The power_take_off_duration_ms of this VehicleSummary.  # noqa: E501
        :type: float
        """

        self._power_take_off_duration_ms = power_take_off_duration_ms

    @property
    def vehicle(self):
        """Gets the vehicle of this VehicleSummary.  # noqa: E501


        :return: The vehicle of this VehicleSummary.  # noqa: E501
        :rtype: VehicleTinyResponse
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this VehicleSummary.


        :param vehicle: The vehicle of this VehicleSummary.  # noqa: E501
        :type: VehicleTinyResponse
        """

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleSummary):
            return True

        return self.to_dict() != other.to_dict()
