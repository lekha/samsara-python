# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class UpdateDvirRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_id': 'str',
        'is_resolved': 'bool',
        'mechanic_notes': 'str',
        'signed_at_time': 'str'
    }

    attribute_map = {
        'author_id': 'authorId',
        'is_resolved': 'isResolved',
        'mechanic_notes': 'mechanicNotes',
        'signed_at_time': 'signedAtTime'
    }

    def __init__(self, author_id=None, is_resolved=None, mechanic_notes=None, signed_at_time=None, local_vars_configuration=None):  # noqa: E501
        """UpdateDvirRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author_id = None
        self._is_resolved = None
        self._mechanic_notes = None
        self._signed_at_time = None
        self.discriminator = None

        self.author_id = author_id
        self.is_resolved = is_resolved
        if mechanic_notes is not None:
            self.mechanic_notes = mechanic_notes
        if signed_at_time is not None:
            self.signed_at_time = signed_at_time

    @property
    def author_id(self):
        """Gets the author_id of this UpdateDvirRequest.  # noqa: E501

        The user who is resolving the dvir.  # noqa: E501

        :return: The author_id of this UpdateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this UpdateDvirRequest.

        The user who is resolving the dvir.  # noqa: E501

        :param author_id: The author_id of this UpdateDvirRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and author_id is None:  # noqa: E501
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def is_resolved(self):
        """Gets the is_resolved of this UpdateDvirRequest.  # noqa: E501

        Resolves the DVIR. Must be `true`.  # noqa: E501

        :return: The is_resolved of this UpdateDvirRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolved

    @is_resolved.setter
    def is_resolved(self, is_resolved):
        """Sets the is_resolved of this UpdateDvirRequest.

        Resolves the DVIR. Must be `true`.  # noqa: E501

        :param is_resolved: The is_resolved of this UpdateDvirRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_resolved is None:  # noqa: E501
            raise ValueError("Invalid value for `is_resolved`, must not be `None`")  # noqa: E501

        self._is_resolved = is_resolved

    @property
    def mechanic_notes(self):
        """Gets the mechanic_notes of this UpdateDvirRequest.  # noqa: E501

        The mechanics notes on the DVIR.  # noqa: E501

        :return: The mechanic_notes of this UpdateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._mechanic_notes

    @mechanic_notes.setter
    def mechanic_notes(self, mechanic_notes):
        """Sets the mechanic_notes of this UpdateDvirRequest.

        The mechanics notes on the DVIR.  # noqa: E501

        :param mechanic_notes: The mechanic_notes of this UpdateDvirRequest.  # noqa: E501
        :type: str
        """

        self._mechanic_notes = mechanic_notes

    @property
    def signed_at_time(self):
        """Gets the signed_at_time of this UpdateDvirRequest.  # noqa: E501

        Time when user signed this DVIR. Defaults to now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :return: The signed_at_time of this UpdateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._signed_at_time

    @signed_at_time.setter
    def signed_at_time(self, signed_at_time):
        """Sets the signed_at_time of this UpdateDvirRequest.

        Time when user signed this DVIR. Defaults to now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :param signed_at_time: The signed_at_time of this UpdateDvirRequest.  # noqa: E501
        :type: str
        """

        self._signed_at_time = signed_at_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDvirRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateDvirRequest):
            return True

        return self.to_dict() != other.to_dict()
