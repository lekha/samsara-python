# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class SafetyEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'behavior_labels': 'list[SafetyEventBehaviorLabel]',
        'coaching_state': 'SafetyEventCoachingState',
        'download_forward_video_url': 'str',
        'download_inward_video_url': 'str',
        'download_tracked_inward_video_url': 'str',
        'driver': 'DriverTinyResponse',
        'id': 'str',
        'location': 'Location',
        'max_acceleration_g_force': 'float',
        'time': 'str',
        'vehicle': 'VehicleTinyResponse'
    }

    attribute_map = {
        'behavior_labels': 'behaviorLabels',
        'coaching_state': 'coachingState',
        'download_forward_video_url': 'downloadForwardVideoUrl',
        'download_inward_video_url': 'downloadInwardVideoUrl',
        'download_tracked_inward_video_url': 'downloadTrackedInwardVideoUrl',
        'driver': 'driver',
        'id': 'id',
        'location': 'location',
        'max_acceleration_g_force': 'maxAccelerationGForce',
        'time': 'time',
        'vehicle': 'vehicle'
    }

    def __init__(self, behavior_labels=None, coaching_state=None, download_forward_video_url=None, download_inward_video_url=None, download_tracked_inward_video_url=None, driver=None, id=None, location=None, max_acceleration_g_force=None, time=None, vehicle=None, local_vars_configuration=None):  # noqa: E501
        """SafetyEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._behavior_labels = None
        self._coaching_state = None
        self._download_forward_video_url = None
        self._download_inward_video_url = None
        self._download_tracked_inward_video_url = None
        self._driver = None
        self._id = None
        self._location = None
        self._max_acceleration_g_force = None
        self._time = None
        self._vehicle = None
        self.discriminator = None

        if behavior_labels is not None:
            self.behavior_labels = behavior_labels
        if coaching_state is not None:
            self.coaching_state = coaching_state
        if download_forward_video_url is not None:
            self.download_forward_video_url = download_forward_video_url
        if download_inward_video_url is not None:
            self.download_inward_video_url = download_inward_video_url
        if download_tracked_inward_video_url is not None:
            self.download_tracked_inward_video_url = download_tracked_inward_video_url
        if driver is not None:
            self.driver = driver
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if max_acceleration_g_force is not None:
            self.max_acceleration_g_force = max_acceleration_g_force
        if time is not None:
            self.time = time
        if vehicle is not None:
            self.vehicle = vehicle

    @property
    def behavior_labels(self):
        """Gets the behavior_labels of this SafetyEvent.  # noqa: E501

        The most up-to-date behavior labels associated with the safety event. These labels can be updated by the Safety Report Admin.  # noqa: E501

        :return: The behavior_labels of this SafetyEvent.  # noqa: E501
        :rtype: list[SafetyEventBehaviorLabel]
        """
        return self._behavior_labels

    @behavior_labels.setter
    def behavior_labels(self, behavior_labels):
        """Sets the behavior_labels of this SafetyEvent.

        The most up-to-date behavior labels associated with the safety event. These labels can be updated by the Safety Report Admin.  # noqa: E501

        :param behavior_labels: The behavior_labels of this SafetyEvent.  # noqa: E501
        :type: list[SafetyEventBehaviorLabel]
        """

        self._behavior_labels = behavior_labels

    @property
    def coaching_state(self):
        """Gets the coaching_state of this SafetyEvent.  # noqa: E501


        :return: The coaching_state of this SafetyEvent.  # noqa: E501
        :rtype: SafetyEventCoachingState
        """
        return self._coaching_state

    @coaching_state.setter
    def coaching_state(self, coaching_state):
        """Sets the coaching_state of this SafetyEvent.


        :param coaching_state: The coaching_state of this SafetyEvent.  # noqa: E501
        :type: SafetyEventCoachingState
        """

        self._coaching_state = coaching_state

    @property
    def download_forward_video_url(self):
        """Gets the download_forward_video_url of this SafetyEvent.  # noqa: E501

        URL to download the forward video.  # noqa: E501

        :return: The download_forward_video_url of this SafetyEvent.  # noqa: E501
        :rtype: str
        """
        return self._download_forward_video_url

    @download_forward_video_url.setter
    def download_forward_video_url(self, download_forward_video_url):
        """Sets the download_forward_video_url of this SafetyEvent.

        URL to download the forward video.  # noqa: E501

        :param download_forward_video_url: The download_forward_video_url of this SafetyEvent.  # noqa: E501
        :type: str
        """

        self._download_forward_video_url = download_forward_video_url

    @property
    def download_inward_video_url(self):
        """Gets the download_inward_video_url of this SafetyEvent.  # noqa: E501

        URL to download the inward video.  # noqa: E501

        :return: The download_inward_video_url of this SafetyEvent.  # noqa: E501
        :rtype: str
        """
        return self._download_inward_video_url

    @download_inward_video_url.setter
    def download_inward_video_url(self, download_inward_video_url):
        """Sets the download_inward_video_url of this SafetyEvent.

        URL to download the inward video.  # noqa: E501

        :param download_inward_video_url: The download_inward_video_url of this SafetyEvent.  # noqa: E501
        :type: str
        """

        self._download_inward_video_url = download_inward_video_url

    @property
    def download_tracked_inward_video_url(self):
        """Gets the download_tracked_inward_video_url of this SafetyEvent.  # noqa: E501

        URL to download the tracked inward video.  # noqa: E501

        :return: The download_tracked_inward_video_url of this SafetyEvent.  # noqa: E501
        :rtype: str
        """
        return self._download_tracked_inward_video_url

    @download_tracked_inward_video_url.setter
    def download_tracked_inward_video_url(self, download_tracked_inward_video_url):
        """Sets the download_tracked_inward_video_url of this SafetyEvent.

        URL to download the tracked inward video.  # noqa: E501

        :param download_tracked_inward_video_url: The download_tracked_inward_video_url of this SafetyEvent.  # noqa: E501
        :type: str
        """

        self._download_tracked_inward_video_url = download_tracked_inward_video_url

    @property
    def driver(self):
        """Gets the driver of this SafetyEvent.  # noqa: E501


        :return: The driver of this SafetyEvent.  # noqa: E501
        :rtype: DriverTinyResponse
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this SafetyEvent.


        :param driver: The driver of this SafetyEvent.  # noqa: E501
        :type: DriverTinyResponse
        """

        self._driver = driver

    @property
    def id(self):
        """Gets the id of this SafetyEvent.  # noqa: E501

        The unique Samsara ID of the safety event.  # noqa: E501

        :return: The id of this SafetyEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SafetyEvent.

        The unique Samsara ID of the safety event.  # noqa: E501

        :param id: The id of this SafetyEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this SafetyEvent.  # noqa: E501


        :return: The location of this SafetyEvent.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SafetyEvent.


        :param location: The location of this SafetyEvent.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def max_acceleration_g_force(self):
        """Gets the max_acceleration_g_force of this SafetyEvent.  # noqa: E501

        The maximum acceleration value as a multiplier on the force of gravity (g).  # noqa: E501

        :return: The max_acceleration_g_force of this SafetyEvent.  # noqa: E501
        :rtype: float
        """
        return self._max_acceleration_g_force

    @max_acceleration_g_force.setter
    def max_acceleration_g_force(self, max_acceleration_g_force):
        """Sets the max_acceleration_g_force of this SafetyEvent.

        The maximum acceleration value as a multiplier on the force of gravity (g).  # noqa: E501

        :param max_acceleration_g_force: The max_acceleration_g_force of this SafetyEvent.  # noqa: E501
        :type: float
        """

        self._max_acceleration_g_force = max_acceleration_g_force

    @property
    def time(self):
        """Gets the time of this SafetyEvent.  # noqa: E501

        The time the safety event occurred in RFC 3339 milliseconds format.  # noqa: E501

        :return: The time of this SafetyEvent.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SafetyEvent.

        The time the safety event occurred in RFC 3339 milliseconds format.  # noqa: E501

        :param time: The time of this SafetyEvent.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def vehicle(self):
        """Gets the vehicle of this SafetyEvent.  # noqa: E501


        :return: The vehicle of this SafetyEvent.  # noqa: E501
        :rtype: VehicleTinyResponse
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this SafetyEvent.


        :param vehicle: The vehicle of this SafetyEvent.  # noqa: E501
        :type: VehicleTinyResponse
        """

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SafetyEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SafetyEvent):
            return True

        return self.to_dict() != other.to_dict()
