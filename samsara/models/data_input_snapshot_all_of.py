# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DataInputSnapshotAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fft_spectra_point': 'FftSpectraDataPoint',
        'j1939_d1_status_point': 'J1939D1StatusDataPoint',
        'location_point': 'LocationDataPoint',
        'number_point': 'NumberDataPoint',
        'string_point': 'StringDataPoint'
    }

    attribute_map = {
        'fft_spectra_point': 'fftSpectraPoint',
        'j1939_d1_status_point': 'j1939D1StatusPoint',
        'location_point': 'locationPoint',
        'number_point': 'numberPoint',
        'string_point': 'stringPoint'
    }

    def __init__(self, fft_spectra_point=None, j1939_d1_status_point=None, location_point=None, number_point=None, string_point=None, local_vars_configuration=None):  # noqa: E501
        """DataInputSnapshotAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fft_spectra_point = None
        self._j1939_d1_status_point = None
        self._location_point = None
        self._number_point = None
        self._string_point = None
        self.discriminator = None

        if fft_spectra_point is not None:
            self.fft_spectra_point = fft_spectra_point
        if j1939_d1_status_point is not None:
            self.j1939_d1_status_point = j1939_d1_status_point
        if location_point is not None:
            self.location_point = location_point
        if number_point is not None:
            self.number_point = number_point
        if string_point is not None:
            self.string_point = string_point

    @property
    def fft_spectra_point(self):
        """Gets the fft_spectra_point of this DataInputSnapshotAllOf.  # noqa: E501


        :return: The fft_spectra_point of this DataInputSnapshotAllOf.  # noqa: E501
        :rtype: FftSpectraDataPoint
        """
        return self._fft_spectra_point

    @fft_spectra_point.setter
    def fft_spectra_point(self, fft_spectra_point):
        """Sets the fft_spectra_point of this DataInputSnapshotAllOf.


        :param fft_spectra_point: The fft_spectra_point of this DataInputSnapshotAllOf.  # noqa: E501
        :type: FftSpectraDataPoint
        """

        self._fft_spectra_point = fft_spectra_point

    @property
    def j1939_d1_status_point(self):
        """Gets the j1939_d1_status_point of this DataInputSnapshotAllOf.  # noqa: E501


        :return: The j1939_d1_status_point of this DataInputSnapshotAllOf.  # noqa: E501
        :rtype: J1939D1StatusDataPoint
        """
        return self._j1939_d1_status_point

    @j1939_d1_status_point.setter
    def j1939_d1_status_point(self, j1939_d1_status_point):
        """Sets the j1939_d1_status_point of this DataInputSnapshotAllOf.


        :param j1939_d1_status_point: The j1939_d1_status_point of this DataInputSnapshotAllOf.  # noqa: E501
        :type: J1939D1StatusDataPoint
        """

        self._j1939_d1_status_point = j1939_d1_status_point

    @property
    def location_point(self):
        """Gets the location_point of this DataInputSnapshotAllOf.  # noqa: E501


        :return: The location_point of this DataInputSnapshotAllOf.  # noqa: E501
        :rtype: LocationDataPoint
        """
        return self._location_point

    @location_point.setter
    def location_point(self, location_point):
        """Sets the location_point of this DataInputSnapshotAllOf.


        :param location_point: The location_point of this DataInputSnapshotAllOf.  # noqa: E501
        :type: LocationDataPoint
        """

        self._location_point = location_point

    @property
    def number_point(self):
        """Gets the number_point of this DataInputSnapshotAllOf.  # noqa: E501


        :return: The number_point of this DataInputSnapshotAllOf.  # noqa: E501
        :rtype: NumberDataPoint
        """
        return self._number_point

    @number_point.setter
    def number_point(self, number_point):
        """Sets the number_point of this DataInputSnapshotAllOf.


        :param number_point: The number_point of this DataInputSnapshotAllOf.  # noqa: E501
        :type: NumberDataPoint
        """

        self._number_point = number_point

    @property
    def string_point(self):
        """Gets the string_point of this DataInputSnapshotAllOf.  # noqa: E501


        :return: The string_point of this DataInputSnapshotAllOf.  # noqa: E501
        :rtype: StringDataPoint
        """
        return self._string_point

    @string_point.setter
    def string_point(self, string_point):
        """Sets the string_point of this DataInputSnapshotAllOf.


        :param string_point: The string_point of this DataInputSnapshotAllOf.  # noqa: E501
        :type: StringDataPoint
        """

        self._string_point = string_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataInputSnapshotAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataInputSnapshotAllOf):
            return True

        return self.to_dict() != other.to_dict()
