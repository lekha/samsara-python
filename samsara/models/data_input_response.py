# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DataInputResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_id': 'str',
        'data_group': 'str',
        'id': 'str',
        'name': 'str',
        'units': 'str',
        'fft_spectra_points': 'list[FftSpectraDataPoint]',
        'j1939_d1_status_points': 'list[J1939D1StatusDataPoint]',
        'location_points': 'list[LocationDataPoint]',
        'number_points': 'list[NumberDataPoint]',
        'string_points': 'list[StringDataPoint]'
    }

    attribute_map = {
        'asset_id': 'assetId',
        'data_group': 'dataGroup',
        'id': 'id',
        'name': 'name',
        'units': 'units',
        'fft_spectra_points': 'fftSpectraPoints',
        'j1939_d1_status_points': 'j1939D1StatusPoints',
        'location_points': 'locationPoints',
        'number_points': 'numberPoints',
        'string_points': 'stringPoints'
    }

    def __init__(self, asset_id=None, data_group=None, id=None, name=None, units=None, fft_spectra_points=None, j1939_d1_status_points=None, location_points=None, number_points=None, string_points=None, local_vars_configuration=None):  # noqa: E501
        """DataInputResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asset_id = None
        self._data_group = None
        self._id = None
        self._name = None
        self._units = None
        self._fft_spectra_points = None
        self._j1939_d1_status_points = None
        self._location_points = None
        self._number_points = None
        self._string_points = None
        self.discriminator = None

        if asset_id is not None:
            self.asset_id = asset_id
        if data_group is not None:
            self.data_group = data_group
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if units is not None:
            self.units = units
        if fft_spectra_points is not None:
            self.fft_spectra_points = fft_spectra_points
        if j1939_d1_status_points is not None:
            self.j1939_d1_status_points = j1939_d1_status_points
        if location_points is not None:
            self.location_points = location_points
        if number_points is not None:
            self.number_points = number_points
        if string_points is not None:
            self.string_points = string_points

    @property
    def asset_id(self):
        """Gets the asset_id of this DataInputResponse.  # noqa: E501

        Unique identifier for the data input's asset.  # noqa: E501

        :return: The asset_id of this DataInputResponse.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DataInputResponse.

        Unique identifier for the data input's asset.  # noqa: E501

        :param asset_id: The asset_id of this DataInputResponse.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def data_group(self):
        """Gets the data_group of this DataInputResponse.  # noqa: E501

        Data group for this data input.  # noqa: E501

        :return: The data_group of this DataInputResponse.  # noqa: E501
        :rtype: str
        """
        return self._data_group

    @data_group.setter
    def data_group(self, data_group):
        """Sets the data_group of this DataInputResponse.

        Data group for this data input.  # noqa: E501

        :param data_group: The data_group of this DataInputResponse.  # noqa: E501
        :type: str
        """

        self._data_group = data_group

    @property
    def id(self):
        """Gets the id of this DataInputResponse.  # noqa: E501

        Unique identifier for the data input.  # noqa: E501

        :return: The id of this DataInputResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataInputResponse.

        Unique identifier for the data input.  # noqa: E501

        :param id: The id of this DataInputResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataInputResponse.  # noqa: E501

        Name of this data input.  # noqa: E501

        :return: The name of this DataInputResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataInputResponse.

        Name of this data input.  # noqa: E501

        :param name: The name of this DataInputResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def units(self):
        """Gets the units of this DataInputResponse.  # noqa: E501

        Units of data for this data input.  # noqa: E501

        :return: The units of this DataInputResponse.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this DataInputResponse.

        Units of data for this data input.  # noqa: E501

        :param units: The units of this DataInputResponse.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def fft_spectra_points(self):
        """Gets the fft_spectra_points of this DataInputResponse.  # noqa: E501

        List of FFT spectra data points from the data input.  # noqa: E501

        :return: The fft_spectra_points of this DataInputResponse.  # noqa: E501
        :rtype: list[FftSpectraDataPoint]
        """
        return self._fft_spectra_points

    @fft_spectra_points.setter
    def fft_spectra_points(self, fft_spectra_points):
        """Sets the fft_spectra_points of this DataInputResponse.

        List of FFT spectra data points from the data input.  # noqa: E501

        :param fft_spectra_points: The fft_spectra_points of this DataInputResponse.  # noqa: E501
        :type: list[FftSpectraDataPoint]
        """

        self._fft_spectra_points = fft_spectra_points

    @property
    def j1939_d1_status_points(self):
        """Gets the j1939_d1_status_points of this DataInputResponse.  # noqa: E501

        List of active J1939D1 statuses.  # noqa: E501

        :return: The j1939_d1_status_points of this DataInputResponse.  # noqa: E501
        :rtype: list[J1939D1StatusDataPoint]
        """
        return self._j1939_d1_status_points

    @j1939_d1_status_points.setter
    def j1939_d1_status_points(self, j1939_d1_status_points):
        """Sets the j1939_d1_status_points of this DataInputResponse.

        List of active J1939D1 statuses.  # noqa: E501

        :param j1939_d1_status_points: The j1939_d1_status_points of this DataInputResponse.  # noqa: E501
        :type: list[J1939D1StatusDataPoint]
        """

        self._j1939_d1_status_points = j1939_d1_status_points

    @property
    def location_points(self):
        """Gets the location_points of this DataInputResponse.  # noqa: E501

        List of location data points from the data input.  # noqa: E501

        :return: The location_points of this DataInputResponse.  # noqa: E501
        :rtype: list[LocationDataPoint]
        """
        return self._location_points

    @location_points.setter
    def location_points(self, location_points):
        """Sets the location_points of this DataInputResponse.

        List of location data points from the data input.  # noqa: E501

        :param location_points: The location_points of this DataInputResponse.  # noqa: E501
        :type: list[LocationDataPoint]
        """

        self._location_points = location_points

    @property
    def number_points(self):
        """Gets the number_points of this DataInputResponse.  # noqa: E501

        List of numeric data points from the data input.  # noqa: E501

        :return: The number_points of this DataInputResponse.  # noqa: E501
        :rtype: list[NumberDataPoint]
        """
        return self._number_points

    @number_points.setter
    def number_points(self, number_points):
        """Sets the number_points of this DataInputResponse.

        List of numeric data points from the data input.  # noqa: E501

        :param number_points: The number_points of this DataInputResponse.  # noqa: E501
        :type: list[NumberDataPoint]
        """

        self._number_points = number_points

    @property
    def string_points(self):
        """Gets the string_points of this DataInputResponse.  # noqa: E501

        List of string data points from the data input.  # noqa: E501

        :return: The string_points of this DataInputResponse.  # noqa: E501
        :rtype: list[StringDataPoint]
        """
        return self._string_points

    @string_points.setter
    def string_points(self, string_points):
        """Sets the string_points of this DataInputResponse.

        List of string data points from the data input.  # noqa: E501

        :param string_points: The string_points of this DataInputResponse.  # noqa: E501
        :type: list[StringDataPoint]
        """

        self._string_points = string_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataInputResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataInputResponse):
            return True

        return self.to_dict() != other.to_dict()
