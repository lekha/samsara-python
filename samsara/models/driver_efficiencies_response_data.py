# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverEfficienciesResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'driver_summaries': 'list[DriverEfficiency]',
        'summary_end_time': 'datetime',
        'summary_start_time': 'datetime'
    }

    attribute_map = {
        'driver_summaries': 'driverSummaries',
        'summary_end_time': 'summaryEndTime',
        'summary_start_time': 'summaryStartTime'
    }

    def __init__(self, driver_summaries=None, summary_end_time=None, summary_start_time=None, local_vars_configuration=None):  # noqa: E501
        """DriverEfficienciesResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._driver_summaries = None
        self._summary_end_time = None
        self._summary_start_time = None
        self.discriminator = None

        if driver_summaries is not None:
            self.driver_summaries = driver_summaries
        if summary_end_time is not None:
            self.summary_end_time = summary_end_time
        if summary_start_time is not None:
            self.summary_start_time = summary_start_time

    @property
    def driver_summaries(self):
        """Gets the driver_summaries of this DriverEfficienciesResponseData.  # noqa: E501

        A list of drivers' efficiencies.  # noqa: E501

        :return: The driver_summaries of this DriverEfficienciesResponseData.  # noqa: E501
        :rtype: list[DriverEfficiency]
        """
        return self._driver_summaries

    @driver_summaries.setter
    def driver_summaries(self, driver_summaries):
        """Sets the driver_summaries of this DriverEfficienciesResponseData.

        A list of drivers' efficiencies.  # noqa: E501

        :param driver_summaries: The driver_summaries of this DriverEfficienciesResponseData.  # noqa: E501
        :type: list[DriverEfficiency]
        """

        self._driver_summaries = driver_summaries

    @property
    def summary_end_time(self):
        """Gets the summary_end_time of this DriverEfficienciesResponseData.  # noqa: E501

        End time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-16T16:00:00Z`  # noqa: E501

        :return: The summary_end_time of this DriverEfficienciesResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._summary_end_time

    @summary_end_time.setter
    def summary_end_time(self, summary_end_time):
        """Sets the summary_end_time of this DriverEfficienciesResponseData.

        End time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-16T16:00:00Z`  # noqa: E501

        :param summary_end_time: The summary_end_time of this DriverEfficienciesResponseData.  # noqa: E501
        :type: datetime
        """

        self._summary_end_time = summary_end_time

    @property
    def summary_start_time(self):
        """Gets the summary_start_time of this DriverEfficienciesResponseData.  # noqa: E501

        Start time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-15T16:00:00Z`  # noqa: E501

        :return: The summary_start_time of this DriverEfficienciesResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._summary_start_time

    @summary_start_time.setter
    def summary_start_time(self, summary_start_time):
        """Sets the summary_start_time of this DriverEfficienciesResponseData.

        Start time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-15T16:00:00Z`  # noqa: E501

        :param summary_start_time: The summary_start_time of this DriverEfficienciesResponseData.  # noqa: E501
        :type: datetime
        """

        self._summary_start_time = summary_start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverEfficienciesResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverEfficienciesResponseData):
            return True

        return self.to_dict() != other.to_dict()
