# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class CreateDvirRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_id': 'str',
        'license_plate': 'str',
        'location': 'str',
        'mechanic_notes': 'str',
        'odometer_meters': 'int',
        'resolved_defect_ids': 'list[str]',
        'safety_status': 'str',
        'trailer_id': 'str',
        'type': 'str',
        'vehicle_id': 'str'
    }

    attribute_map = {
        'author_id': 'authorId',
        'license_plate': 'licensePlate',
        'location': 'location',
        'mechanic_notes': 'mechanicNotes',
        'odometer_meters': 'odometerMeters',
        'resolved_defect_ids': 'resolvedDefectIds',
        'safety_status': 'safetyStatus',
        'trailer_id': 'trailerId',
        'type': 'type',
        'vehicle_id': 'vehicleId'
    }

    def __init__(self, author_id=None, license_plate=None, location=None, mechanic_notes=None, odometer_meters=None, resolved_defect_ids=None, safety_status=None, trailer_id=None, type=None, vehicle_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateDvirRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author_id = None
        self._license_plate = None
        self._location = None
        self._mechanic_notes = None
        self._odometer_meters = None
        self._resolved_defect_ids = None
        self._safety_status = None
        self._trailer_id = None
        self._type = None
        self._vehicle_id = None
        self.discriminator = None

        self.author_id = author_id
        if license_plate is not None:
            self.license_plate = license_plate
        if location is not None:
            self.location = location
        if mechanic_notes is not None:
            self.mechanic_notes = mechanic_notes
        if odometer_meters is not None:
            self.odometer_meters = odometer_meters
        if resolved_defect_ids is not None:
            self.resolved_defect_ids = resolved_defect_ids
        self.safety_status = safety_status
        if trailer_id is not None:
            self.trailer_id = trailer_id
        self.type = type
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id

    @property
    def author_id(self):
        """Gets the author_id of this CreateDvirRequest.  # noqa: E501

        Samsara user ID of the mechanic creating the DVIR.  # noqa: E501

        :return: The author_id of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this CreateDvirRequest.

        Samsara user ID of the mechanic creating the DVIR.  # noqa: E501

        :param author_id: The author_id of this CreateDvirRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and author_id is None:  # noqa: E501
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def license_plate(self):
        """Gets the license_plate of this CreateDvirRequest.  # noqa: E501

        The license plate of this vehicle.  # noqa: E501

        :return: The license_plate of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this CreateDvirRequest.

        The license plate of this vehicle.  # noqa: E501

        :param license_plate: The license_plate of this CreateDvirRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                license_plate is not None and len(license_plate) > 12):
            raise ValueError("Invalid value for `license_plate`, length must be less than or equal to `12`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def location(self):
        """Gets the location of this CreateDvirRequest.  # noqa: E501

        Optional string if your jurisdiction requires a location of the DVIR.  # noqa: E501

        :return: The location of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateDvirRequest.

        Optional string if your jurisdiction requires a location of the DVIR.  # noqa: E501

        :param location: The location of this CreateDvirRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mechanic_notes(self):
        """Gets the mechanic_notes of this CreateDvirRequest.  # noqa: E501

        The mechanics notes on the DVIR.  # noqa: E501

        :return: The mechanic_notes of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._mechanic_notes

    @mechanic_notes.setter
    def mechanic_notes(self, mechanic_notes):
        """Sets the mechanic_notes of this CreateDvirRequest.

        The mechanics notes on the DVIR.  # noqa: E501

        :param mechanic_notes: The mechanic_notes of this CreateDvirRequest.  # noqa: E501
        :type: str
        """

        self._mechanic_notes = mechanic_notes

    @property
    def odometer_meters(self):
        """Gets the odometer_meters of this CreateDvirRequest.  # noqa: E501

        The odometer reading in meters.  # noqa: E501

        :return: The odometer_meters of this CreateDvirRequest.  # noqa: E501
        :rtype: int
        """
        return self._odometer_meters

    @odometer_meters.setter
    def odometer_meters(self, odometer_meters):
        """Sets the odometer_meters of this CreateDvirRequest.

        The odometer reading in meters.  # noqa: E501

        :param odometer_meters: The odometer_meters of this CreateDvirRequest.  # noqa: E501
        :type: int
        """

        self._odometer_meters = odometer_meters

    @property
    def resolved_defect_ids(self):
        """Gets the resolved_defect_ids of this CreateDvirRequest.  # noqa: E501

        Array of ids for defects being resolved with this DVIR.  # noqa: E501

        :return: The resolved_defect_ids of this CreateDvirRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._resolved_defect_ids

    @resolved_defect_ids.setter
    def resolved_defect_ids(self, resolved_defect_ids):
        """Sets the resolved_defect_ids of this CreateDvirRequest.

        Array of ids for defects being resolved with this DVIR.  # noqa: E501

        :param resolved_defect_ids: The resolved_defect_ids of this CreateDvirRequest.  # noqa: E501
        :type: list[str]
        """

        self._resolved_defect_ids = resolved_defect_ids

    @property
    def safety_status(self):
        """Gets the safety_status of this CreateDvirRequest.  # noqa: E501

        Whether or not this vehicle or trailer is safe to drive.  # noqa: E501

        :return: The safety_status of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._safety_status

    @safety_status.setter
    def safety_status(self, safety_status):
        """Sets the safety_status of this CreateDvirRequest.

        Whether or not this vehicle or trailer is safe to drive.  # noqa: E501

        :param safety_status: The safety_status of this CreateDvirRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and safety_status is None:  # noqa: E501
            raise ValueError("Invalid value for `safety_status`, must not be `None`")  # noqa: E501
        allowed_values = ["safe", "unsafe"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and safety_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `safety_status` ({0}), must be one of {1}"  # noqa: E501
                .format(safety_status, allowed_values)
            )

        self._safety_status = safety_status

    @property
    def trailer_id(self):
        """Gets the trailer_id of this CreateDvirRequest.  # noqa: E501

        Id of trailer being inspected. Either vehicleId or trailerId must be provided.  # noqa: E501

        :return: The trailer_id of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._trailer_id

    @trailer_id.setter
    def trailer_id(self, trailer_id):
        """Sets the trailer_id of this CreateDvirRequest.

        Id of trailer being inspected. Either vehicleId or trailerId must be provided.  # noqa: E501

        :param trailer_id: The trailer_id of this CreateDvirRequest.  # noqa: E501
        :type: str
        """

        self._trailer_id = trailer_id

    @property
    def type(self):
        """Gets the type of this CreateDvirRequest.  # noqa: E501

        Only type 'mechanic' is currently accepted.  # noqa: E501

        :return: The type of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateDvirRequest.

        Only type 'mechanic' is currently accepted.  # noqa: E501

        :param type: The type of this CreateDvirRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["mechanic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this CreateDvirRequest.  # noqa: E501

        Id of vehicle being inspected. Either vehicleId or trailerId must be provided.  # noqa: E501

        :return: The vehicle_id of this CreateDvirRequest.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this CreateDvirRequest.

        Id of vehicle being inspected. Either vehicleId or trailerId must be provided.  # noqa: E501

        :param vehicle_id: The vehicle_id of this CreateDvirRequest.  # noqa: E501
        :type: str
        """

        self._vehicle_id = vehicle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDvirRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDvirRequest):
            return True

        return self.to_dict() != other.to_dict()
