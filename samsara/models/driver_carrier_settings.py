# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DriverCarrierSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'carrier_name': 'str',
        'dot_number': 'int',
        'main_office_address': 'str'
    }

    attribute_map = {
        'carrier_name': 'carrierName',
        'dot_number': 'dotNumber',
        'main_office_address': 'mainOfficeAddress'
    }

    def __init__(self, carrier_name=None, dot_number=None, main_office_address=None, local_vars_configuration=None):  # noqa: E501
        """DriverCarrierSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._carrier_name = None
        self._dot_number = None
        self._main_office_address = None
        self.discriminator = None

        if carrier_name is not None:
            self.carrier_name = carrier_name
        if dot_number is not None:
            self.dot_number = dot_number
        if main_office_address is not None:
            self.main_office_address = main_office_address

    @property
    def carrier_name(self):
        """Gets the carrier_name of this DriverCarrierSettings.  # noqa: E501

        Carrier for a given driver.  # noqa: E501

        :return: The carrier_name of this DriverCarrierSettings.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this DriverCarrierSettings.

        Carrier for a given driver.  # noqa: E501

        :param carrier_name: The carrier_name of this DriverCarrierSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                carrier_name is not None and len(carrier_name) > 255):
            raise ValueError("Invalid value for `carrier_name`, length must be less than or equal to `255`")  # noqa: E501

        self._carrier_name = carrier_name

    @property
    def dot_number(self):
        """Gets the dot_number of this DriverCarrierSettings.  # noqa: E501

        Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.  # noqa: E501

        :return: The dot_number of this DriverCarrierSettings.  # noqa: E501
        :rtype: int
        """
        return self._dot_number

    @dot_number.setter
    def dot_number(self, dot_number):
        """Sets the dot_number of this DriverCarrierSettings.

        Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.  # noqa: E501

        :param dot_number: The dot_number of this DriverCarrierSettings.  # noqa: E501
        :type: int
        """

        self._dot_number = dot_number

    @property
    def main_office_address(self):
        """Gets the main_office_address of this DriverCarrierSettings.  # noqa: E501

        Main office address for a given driver. If this differs from the general organization's settings, the override value is used.   # noqa: E501

        :return: The main_office_address of this DriverCarrierSettings.  # noqa: E501
        :rtype: str
        """
        return self._main_office_address

    @main_office_address.setter
    def main_office_address(self, main_office_address):
        """Sets the main_office_address of this DriverCarrierSettings.

        Main office address for a given driver. If this differs from the general organization's settings, the override value is used.   # noqa: E501

        :param main_office_address: The main_office_address of this DriverCarrierSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                main_office_address is not None and len(main_office_address) > 255):
            raise ValueError("Invalid value for `main_office_address`, length must be less than or equal to `255`")  # noqa: E501

        self._main_office_address = main_office_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverCarrierSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriverCarrierSettings):
            return True

        return self.to_dict() != other.to_dict()
