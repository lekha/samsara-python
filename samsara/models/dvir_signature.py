# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DvirSignature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signatory_user': 'object',
        'signed_at_time': 'str',
        'type': 'str'
    }

    attribute_map = {
        'signatory_user': 'signatoryUser',
        'signed_at_time': 'signedAtTime',
        'type': 'type'
    }

    def __init__(self, signatory_user=None, signed_at_time=None, type='driver', local_vars_configuration=None):  # noqa: E501
        """DvirSignature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._signatory_user = None
        self._signed_at_time = None
        self._type = None
        self.discriminator = None

        if signatory_user is not None:
            self.signatory_user = signatory_user
        if signed_at_time is not None:
            self.signed_at_time = signed_at_time
        if type is not None:
            self.type = type

    @property
    def signatory_user(self):
        """Gets the signatory_user of this DvirSignature.  # noqa: E501


        :return: The signatory_user of this DvirSignature.  # noqa: E501
        :rtype: object
        """
        return self._signatory_user

    @signatory_user.setter
    def signatory_user(self, signatory_user):
        """Sets the signatory_user of this DvirSignature.


        :param signatory_user: The signatory_user of this DvirSignature.  # noqa: E501
        :type: object
        """

        self._signatory_user = signatory_user

    @property
    def signed_at_time(self):
        """Gets the signed_at_time of this DvirSignature.  # noqa: E501

        The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :return: The signed_at_time of this DvirSignature.  # noqa: E501
        :rtype: str
        """
        return self._signed_at_time

    @signed_at_time.setter
    def signed_at_time(self, signed_at_time):
        """Sets the signed_at_time of this DvirSignature.

        The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :param signed_at_time: The signed_at_time of this DvirSignature.  # noqa: E501
        :type: str
        """

        self._signed_at_time = signed_at_time

    @property
    def type(self):
        """Gets the type of this DvirSignature.  # noqa: E501

        Whether the DVIR was submitted by a `driver` or `mechanic`.  # noqa: E501

        :return: The type of this DvirSignature.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DvirSignature.

        Whether the DVIR was submitted by a `driver` or `mechanic`.  # noqa: E501

        :param type: The type of this DvirSignature.  # noqa: E501
        :type: str
        """
        allowed_values = ["driver", "mechanic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DvirSignature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DvirSignature):
            return True

        return self.to_dict() != other.to_dict()
