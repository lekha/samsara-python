# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class DocumentPdfQueryResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_at_time': 'str',
        'document_id': 'str',
        'download_document_pdf_url': 'str',
        'id': 'str',
        'job_status': 'str',
        'requested_at_time': 'str'
    }

    attribute_map = {
        'completed_at_time': 'completedAtTime',
        'document_id': 'documentId',
        'download_document_pdf_url': 'downloadDocumentPdfUrl',
        'id': 'id',
        'job_status': 'jobStatus',
        'requested_at_time': 'requestedAtTime'
    }

    def __init__(self, completed_at_time=None, document_id=None, download_document_pdf_url=None, id=None, job_status=None, requested_at_time=None, local_vars_configuration=None):  # noqa: E501
        """DocumentPdfQueryResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed_at_time = None
        self._document_id = None
        self._download_document_pdf_url = None
        self._id = None
        self._job_status = None
        self._requested_at_time = None
        self.discriminator = None

        if completed_at_time is not None:
            self.completed_at_time = completed_at_time
        if document_id is not None:
            self.document_id = document_id
        if download_document_pdf_url is not None:
            self.download_document_pdf_url = download_document_pdf_url
        if id is not None:
            self.id = id
        if job_status is not None:
            self.job_status = job_status
        if requested_at_time is not None:
            self.requested_at_time = requested_at_time

    @property
    def completed_at_time(self):
        """Gets the completed_at_time of this DocumentPdfQueryResponseData.  # noqa: E501

        Time that PDF generation was completed, in RFC 3339 format.  # noqa: E501

        :return: The completed_at_time of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._completed_at_time

    @completed_at_time.setter
    def completed_at_time(self, completed_at_time):
        """Sets the completed_at_time of this DocumentPdfQueryResponseData.

        Time that PDF generation was completed, in RFC 3339 format.  # noqa: E501

        :param completed_at_time: The completed_at_time of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """

        self._completed_at_time = completed_at_time

    @property
    def document_id(self):
        """Gets the document_id of this DocumentPdfQueryResponseData.  # noqa: E501

        ID of the document.  # noqa: E501

        :return: The document_id of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentPdfQueryResponseData.

        ID of the document.  # noqa: E501

        :param document_id: The document_id of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def download_document_pdf_url(self):
        """Gets the download_document_pdf_url of this DocumentPdfQueryResponseData.  # noqa: E501

        S3 pre-signed URL to download PDF file.  # noqa: E501

        :return: The download_document_pdf_url of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._download_document_pdf_url

    @download_document_pdf_url.setter
    def download_document_pdf_url(self, download_document_pdf_url):
        """Sets the download_document_pdf_url of this DocumentPdfQueryResponseData.

        S3 pre-signed URL to download PDF file.  # noqa: E501

        :param download_document_pdf_url: The download_document_pdf_url of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """

        self._download_document_pdf_url = download_document_pdf_url

    @property
    def id(self):
        """Gets the id of this DocumentPdfQueryResponseData.  # noqa: E501

        ID of the PDF file generated or being generated for the document  # noqa: E501

        :return: The id of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentPdfQueryResponseData.

        ID of the PDF file generated or being generated for the document  # noqa: E501

        :param id: The id of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_status(self):
        """Gets the job_status of this DocumentPdfQueryResponseData.  # noqa: E501

        Describes status of the PDF generation job.  # noqa: E501

        :return: The job_status of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this DocumentPdfQueryResponseData.

        Describes status of the PDF generation job.  # noqa: E501

        :param job_status: The job_status of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """
        allowed_values = ["requested", "processing", "completed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and job_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `job_status` ({0}), must be one of {1}"  # noqa: E501
                .format(job_status, allowed_values)
            )

        self._job_status = job_status

    @property
    def requested_at_time(self):
        """Gets the requested_at_time of this DocumentPdfQueryResponseData.  # noqa: E501

        Time that PDF generation was requested, in RFC 3339 format.  # noqa: E501

        :return: The requested_at_time of this DocumentPdfQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._requested_at_time

    @requested_at_time.setter
    def requested_at_time(self, requested_at_time):
        """Sets the requested_at_time of this DocumentPdfQueryResponseData.

        Time that PDF generation was requested, in RFC 3339 format.  # noqa: E501

        :param requested_at_time: The requested_at_time of this DocumentPdfQueryResponseData.  # noqa: E501
        :type: str
        """

        self._requested_at_time = requested_at_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentPdfQueryResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentPdfQueryResponseData):
            return True

        return self.to_dict() != other.to_dict()
