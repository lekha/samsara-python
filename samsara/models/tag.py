# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class Tag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'parent_tag_id': 'str',
        'addresses': 'list[TaggedObject]',
        'assets': 'list[TaggedObject]',
        'drivers': 'list[TaggedObject]',
        'external_ids': 'object',
        'machines': 'list[TaggedObject]',
        'parent_tag': 'ParentTag',
        'sensors': 'list[TaggedObject]',
        'vehicles': 'list[TaggedObject]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parent_tag_id': 'parentTagId',
        'addresses': 'addresses',
        'assets': 'assets',
        'drivers': 'drivers',
        'external_ids': 'externalIds',
        'machines': 'machines',
        'parent_tag': 'parentTag',
        'sensors': 'sensors',
        'vehicles': 'vehicles'
    }

    def __init__(self, id=None, name=None, parent_tag_id=None, addresses=None, assets=None, drivers=None, external_ids=None, machines=None, parent_tag=None, sensors=None, vehicles=None, local_vars_configuration=None):  # noqa: E501
        """Tag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._parent_tag_id = None
        self._addresses = None
        self._assets = None
        self._drivers = None
        self._external_ids = None
        self._machines = None
        self._parent_tag = None
        self._sensors = None
        self._vehicles = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parent_tag_id is not None:
            self.parent_tag_id = parent_tag_id
        if addresses is not None:
            self.addresses = addresses
        if assets is not None:
            self.assets = assets
        if drivers is not None:
            self.drivers = drivers
        if external_ids is not None:
            self.external_ids = external_ids
        if machines is not None:
            self.machines = machines
        if parent_tag is not None:
            self.parent_tag = parent_tag
        if sensors is not None:
            self.sensors = sensors
        if vehicles is not None:
            self.vehicles = vehicles

    @property
    def id(self):
        """Gets the id of this Tag.  # noqa: E501

        Unique Samsara ID of this tag.  # noqa: E501

        :return: The id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        Unique Samsara ID of this tag.  # noqa: E501

        :param id: The id of this Tag.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tag.  # noqa: E501

        Name of this tag.  # noqa: E501

        :return: The name of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        Name of this tag.  # noqa: E501

        :param name: The name of this Tag.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def parent_tag_id(self):
        """Gets the parent_tag_id of this Tag.  # noqa: E501

        If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.  # noqa: E501

        :return: The parent_tag_id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._parent_tag_id

    @parent_tag_id.setter
    def parent_tag_id(self, parent_tag_id):
        """Sets the parent_tag_id of this Tag.

        If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.  # noqa: E501

        :param parent_tag_id: The parent_tag_id of this Tag.  # noqa: E501
        :type: str
        """

        self._parent_tag_id = parent_tag_id

    @property
    def addresses(self):
        """Gets the addresses of this Tag.  # noqa: E501

        The addresses that belong to this tag.  # noqa: E501

        :return: The addresses of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Tag.

        The addresses that belong to this tag.  # noqa: E501

        :param addresses: The addresses of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._addresses = addresses

    @property
    def assets(self):
        """Gets the assets of this Tag.  # noqa: E501

        The trailers, unpowered, and powered assets that belong to this tag.  # noqa: E501

        :return: The assets of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Tag.

        The trailers, unpowered, and powered assets that belong to this tag.  # noqa: E501

        :param assets: The assets of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._assets = assets

    @property
    def drivers(self):
        """Gets the drivers of this Tag.  # noqa: E501

        The drivers that belong to this tag.  # noqa: E501

        :return: The drivers of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this Tag.

        The drivers that belong to this tag.  # noqa: E501

        :param drivers: The drivers of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._drivers = drivers

    @property
    def external_ids(self):
        """Gets the external_ids of this Tag.  # noqa: E501

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :return: The external_ids of this Tag.  # noqa: E501
        :rtype: object
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this Tag.

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :param external_ids: The external_ids of this Tag.  # noqa: E501
        :type: object
        """

        self._external_ids = external_ids

    @property
    def machines(self):
        """Gets the machines of this Tag.  # noqa: E501

        The machines that belong to thistag.  # noqa: E501

        :return: The machines of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this Tag.

        The machines that belong to thistag.  # noqa: E501

        :param machines: The machines of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._machines = machines

    @property
    def parent_tag(self):
        """Gets the parent_tag of this Tag.  # noqa: E501


        :return: The parent_tag of this Tag.  # noqa: E501
        :rtype: ParentTag
        """
        return self._parent_tag

    @parent_tag.setter
    def parent_tag(self, parent_tag):
        """Sets the parent_tag of this Tag.


        :param parent_tag: The parent_tag of this Tag.  # noqa: E501
        :type: ParentTag
        """

        self._parent_tag = parent_tag

    @property
    def sensors(self):
        """Gets the sensors of this Tag.  # noqa: E501

        The sensors that belong to this tag.  # noqa: E501

        :return: The sensors of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this Tag.

        The sensors that belong to this tag.  # noqa: E501

        :param sensors: The sensors of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._sensors = sensors

    @property
    def vehicles(self):
        """Gets the vehicles of this Tag.  # noqa: E501

        The vehicles that belong to this tag.  # noqa: E501

        :return: The vehicles of this Tag.  # noqa: E501
        :rtype: list[TaggedObject]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this Tag.

        The vehicles that belong to this tag.  # noqa: E501

        :param vehicles: The vehicles of this Tag.  # noqa: E501
        :type: list[TaggedObject]
        """

        self._vehicles = vehicles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tag):
            return True

        return self.to_dict() != other.to_dict()
