# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class MinimalRouteStop(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actual_arrival_time': 'str',
        'actual_departure_time': 'str',
        'eta': 'str',
        'external_ids': 'dict(str, str)',
        'id': 'str',
        'skipped_time': 'str',
        'state': 'str'
    }

    attribute_map = {
        'actual_arrival_time': 'actualArrivalTime',
        'actual_departure_time': 'actualDepartureTime',
        'eta': 'eta',
        'external_ids': 'externalIds',
        'id': 'id',
        'skipped_time': 'skippedTime',
        'state': 'state'
    }

    def __init__(self, actual_arrival_time=None, actual_departure_time=None, eta=None, external_ids=None, id=None, skipped_time=None, state=None, local_vars_configuration=None):  # noqa: E501
        """MinimalRouteStop - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actual_arrival_time = None
        self._actual_departure_time = None
        self._eta = None
        self._external_ids = None
        self._id = None
        self._skipped_time = None
        self._state = None
        self.discriminator = None

        if actual_arrival_time is not None:
            self.actual_arrival_time = actual_arrival_time
        if actual_departure_time is not None:
            self.actual_departure_time = actual_departure_time
        if eta is not None:
            self.eta = eta
        if external_ids is not None:
            self.external_ids = external_ids
        self.id = id
        if skipped_time is not None:
            self.skipped_time = skipped_time
        self.state = state

    @property
    def actual_arrival_time(self):
        """Gets the actual_arrival_time of this MinimalRouteStop.  # noqa: E501

        Actual arrival time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :return: The actual_arrival_time of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._actual_arrival_time

    @actual_arrival_time.setter
    def actual_arrival_time(self, actual_arrival_time):
        """Sets the actual_arrival_time of this MinimalRouteStop.

        Actual arrival time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :param actual_arrival_time: The actual_arrival_time of this MinimalRouteStop.  # noqa: E501
        :type: str
        """

        self._actual_arrival_time = actual_arrival_time

    @property
    def actual_departure_time(self):
        """Gets the actual_departure_time of this MinimalRouteStop.  # noqa: E501

        Actual departure time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :return: The actual_departure_time of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._actual_departure_time

    @actual_departure_time.setter
    def actual_departure_time(self, actual_departure_time):
        """Sets the actual_departure_time of this MinimalRouteStop.

        Actual departure time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :param actual_departure_time: The actual_departure_time of this MinimalRouteStop.  # noqa: E501
        :type: str
        """

        self._actual_departure_time = actual_departure_time

    @property
    def eta(self):
        """Gets the eta of this MinimalRouteStop.  # noqa: E501

        Estimated time of arrival, if this stop is currently en-route.  # noqa: E501

        :return: The eta of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this MinimalRouteStop.

        Estimated time of arrival, if this stop is currently en-route.  # noqa: E501

        :param eta: The eta of this MinimalRouteStop.  # noqa: E501
        :type: str
        """

        self._eta = eta

    @property
    def external_ids(self):
        """Gets the external_ids of this MinimalRouteStop.  # noqa: E501

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :return: The external_ids of this MinimalRouteStop.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this MinimalRouteStop.

        The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.  # noqa: E501

        :param external_ids: The external_ids of this MinimalRouteStop.  # noqa: E501
        :type: dict(str, str)
        """

        self._external_ids = external_ids

    @property
    def id(self):
        """Gets the id of this MinimalRouteStop.  # noqa: E501

        Unique identifier for the route stop.  # noqa: E501

        :return: The id of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MinimalRouteStop.

        Unique identifier for the route stop.  # noqa: E501

        :param id: The id of this MinimalRouteStop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def skipped_time(self):
        """Gets the skipped_time of this MinimalRouteStop.  # noqa: E501

        Skipped time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :return: The skipped_time of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._skipped_time

    @skipped_time.setter
    def skipped_time(self, skipped_time):
        """Sets the skipped_time of this MinimalRouteStop.

        Skipped time, if it exists, for the route stop in RFC 3339 format.  # noqa: E501

        :param skipped_time: The skipped_time of this MinimalRouteStop.  # noqa: E501
        :type: str
        """

        self._skipped_time = skipped_time

    @property
    def state(self):
        """Gets the state of this MinimalRouteStop.  # noqa: E501

        The current state of the route stop.  # noqa: E501

        :return: The state of this MinimalRouteStop.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MinimalRouteStop.

        The current state of the route stop.  # noqa: E501

        :param state: The state of this MinimalRouteStop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["unassigned", "scheduled", "en route", "skipped", "arrived", "departed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinimalRouteStop):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinimalRouteStop):
            return True

        return self.to_dict() != other.to_dict()
