# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class J1939D1StatusDataPointValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amber_lamp_status': 'float',
        'fmi': 'float',
        'mil_status': 'float',
        'occurance_count': 'float',
        'protect_lamp_status': 'float',
        'red_lamp_status': 'float',
        'spn': 'float',
        'tx_id': 'float'
    }

    attribute_map = {
        'amber_lamp_status': 'amberLampStatus',
        'fmi': 'fmi',
        'mil_status': 'milStatus',
        'occurance_count': 'occuranceCount',
        'protect_lamp_status': 'protectLampStatus',
        'red_lamp_status': 'redLampStatus',
        'spn': 'spn',
        'tx_id': 'txId'
    }

    def __init__(self, amber_lamp_status=None, fmi=None, mil_status=None, occurance_count=None, protect_lamp_status=None, red_lamp_status=None, spn=None, tx_id=None, local_vars_configuration=None):  # noqa: E501
        """J1939D1StatusDataPointValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amber_lamp_status = None
        self._fmi = None
        self._mil_status = None
        self._occurance_count = None
        self._protect_lamp_status = None
        self._red_lamp_status = None
        self._spn = None
        self._tx_id = None
        self.discriminator = None

        if amber_lamp_status is not None:
            self.amber_lamp_status = amber_lamp_status
        if fmi is not None:
            self.fmi = fmi
        if mil_status is not None:
            self.mil_status = mil_status
        if occurance_count is not None:
            self.occurance_count = occurance_count
        if protect_lamp_status is not None:
            self.protect_lamp_status = protect_lamp_status
        if red_lamp_status is not None:
            self.red_lamp_status = red_lamp_status
        if spn is not None:
            self.spn = spn
        if tx_id is not None:
            self.tx_id = tx_id

    @property
    def amber_lamp_status(self):
        """Gets the amber_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The amber_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._amber_lamp_status

    @amber_lamp_status.setter
    def amber_lamp_status(self, amber_lamp_status):
        """Sets the amber_lamp_status of this J1939D1StatusDataPointValue.


        :param amber_lamp_status: The amber_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._amber_lamp_status = amber_lamp_status

    @property
    def fmi(self):
        """Gets the fmi of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The fmi of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._fmi

    @fmi.setter
    def fmi(self, fmi):
        """Sets the fmi of this J1939D1StatusDataPointValue.


        :param fmi: The fmi of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._fmi = fmi

    @property
    def mil_status(self):
        """Gets the mil_status of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The mil_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._mil_status

    @mil_status.setter
    def mil_status(self, mil_status):
        """Sets the mil_status of this J1939D1StatusDataPointValue.


        :param mil_status: The mil_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._mil_status = mil_status

    @property
    def occurance_count(self):
        """Gets the occurance_count of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The occurance_count of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._occurance_count

    @occurance_count.setter
    def occurance_count(self, occurance_count):
        """Sets the occurance_count of this J1939D1StatusDataPointValue.


        :param occurance_count: The occurance_count of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._occurance_count = occurance_count

    @property
    def protect_lamp_status(self):
        """Gets the protect_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The protect_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._protect_lamp_status

    @protect_lamp_status.setter
    def protect_lamp_status(self, protect_lamp_status):
        """Sets the protect_lamp_status of this J1939D1StatusDataPointValue.


        :param protect_lamp_status: The protect_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._protect_lamp_status = protect_lamp_status

    @property
    def red_lamp_status(self):
        """Gets the red_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The red_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._red_lamp_status

    @red_lamp_status.setter
    def red_lamp_status(self, red_lamp_status):
        """Sets the red_lamp_status of this J1939D1StatusDataPointValue.


        :param red_lamp_status: The red_lamp_status of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._red_lamp_status = red_lamp_status

    @property
    def spn(self):
        """Gets the spn of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The spn of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._spn

    @spn.setter
    def spn(self, spn):
        """Sets the spn of this J1939D1StatusDataPointValue.


        :param spn: The spn of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._spn = spn

    @property
    def tx_id(self):
        """Gets the tx_id of this J1939D1StatusDataPointValue.  # noqa: E501


        :return: The tx_id of this J1939D1StatusDataPointValue.  # noqa: E501
        :rtype: float
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this J1939D1StatusDataPointValue.


        :param tx_id: The tx_id of this J1939D1StatusDataPointValue.  # noqa: E501
        :type: float
        """

        self._tx_id = tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, J1939D1StatusDataPointValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, J1939D1StatusDataPointValue):
            return True

        return self.to_dict() != other.to_dict()
