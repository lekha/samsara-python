# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class LocationDataPointGpsLocationPlace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'city': 'str',
        'house_number': 'str',
        'neighborhood': 'str',
        'poi': 'str',
        'postcode': 'str',
        'state': 'str',
        'street': 'str'
    }

    attribute_map = {
        'city': 'city',
        'house_number': 'houseNumber',
        'neighborhood': 'neighborhood',
        'poi': 'poi',
        'postcode': 'postcode',
        'state': 'state',
        'street': 'street'
    }

    def __init__(self, city=None, house_number=None, neighborhood=None, poi=None, postcode=None, state=None, street=None, local_vars_configuration=None):  # noqa: E501
        """LocationDataPointGpsLocationPlace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._city = None
        self._house_number = None
        self._neighborhood = None
        self._poi = None
        self._postcode = None
        self._state = None
        self._street = None
        self.discriminator = None

        if city is not None:
            self.city = city
        if house_number is not None:
            self.house_number = house_number
        if neighborhood is not None:
            self.neighborhood = neighborhood
        if poi is not None:
            self.poi = poi
        if postcode is not None:
            self.postcode = postcode
        if state is not None:
            self.state = state
        if street is not None:
            self.street = street

    @property
    def city(self):
        """Gets the city of this LocationDataPointGpsLocationPlace.  # noqa: E501

        City  # noqa: E501

        :return: The city of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationDataPointGpsLocationPlace.

        City  # noqa: E501

        :param city: The city of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def house_number(self):
        """Gets the house_number of this LocationDataPointGpsLocationPlace.  # noqa: E501

        House number  # noqa: E501

        :return: The house_number of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this LocationDataPointGpsLocationPlace.

        House number  # noqa: E501

        :param house_number: The house_number of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def neighborhood(self):
        """Gets the neighborhood of this LocationDataPointGpsLocationPlace.  # noqa: E501

        Neighborhood  # noqa: E501

        :return: The neighborhood of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this LocationDataPointGpsLocationPlace.

        Neighborhood  # noqa: E501

        :param neighborhood: The neighborhood of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._neighborhood = neighborhood

    @property
    def poi(self):
        """Gets the poi of this LocationDataPointGpsLocationPlace.  # noqa: E501

        POI  # noqa: E501

        :return: The poi of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._poi

    @poi.setter
    def poi(self, poi):
        """Sets the poi of this LocationDataPointGpsLocationPlace.

        POI  # noqa: E501

        :param poi: The poi of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._poi = poi

    @property
    def postcode(self):
        """Gets the postcode of this LocationDataPointGpsLocationPlace.  # noqa: E501

        Postcode  # noqa: E501

        :return: The postcode of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this LocationDataPointGpsLocationPlace.

        Postcode  # noqa: E501

        :param postcode: The postcode of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def state(self):
        """Gets the state of this LocationDataPointGpsLocationPlace.  # noqa: E501

        State  # noqa: E501

        :return: The state of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocationDataPointGpsLocationPlace.

        State  # noqa: E501

        :param state: The state of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this LocationDataPointGpsLocationPlace.  # noqa: E501

        Street  # noqa: E501

        :return: The street of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this LocationDataPointGpsLocationPlace.

        Street  # noqa: E501

        :param street: The street of this LocationDataPointGpsLocationPlace.  # noqa: E501
        :type: str
        """

        self._street = street

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationDataPointGpsLocationPlace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationDataPointGpsLocationPlace):
            return True

        return self.to_dict() != other.to_dict()
