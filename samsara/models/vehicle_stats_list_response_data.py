# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class VehicleStatsListResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aux_input1': 'list[VehicleStatsAuxInput]',
        'aux_input2': 'list[VehicleStatsAuxInput]',
        'engine_states': 'list[VehicleStatsEngineState]',
        'fuel_percents': 'list[VehicleStatsFuelPercent]',
        'gps_distance_meters': 'list[VehicleStatsGpsDistanceMeters]',
        'gps_odometer_meters': 'list[VehicleStatsGpsOdometerMeters]',
        'id': 'str',
        'name': 'str',
        'obd_engine_seconds': 'list[VehicleStatsObdEngineSeconds]',
        'obd_odometer_meters': 'list[VehicleStatsObdOdometerMeters]'
    }

    attribute_map = {
        'aux_input1': 'auxInput1',
        'aux_input2': 'auxInput2',
        'engine_states': 'engineStates',
        'fuel_percents': 'fuelPercents',
        'gps_distance_meters': 'gpsDistanceMeters',
        'gps_odometer_meters': 'gpsOdometerMeters',
        'id': 'id',
        'name': 'name',
        'obd_engine_seconds': 'obdEngineSeconds',
        'obd_odometer_meters': 'obdOdometerMeters'
    }

    def __init__(self, aux_input1=None, aux_input2=None, engine_states=None, fuel_percents=None, gps_distance_meters=None, gps_odometer_meters=None, id=None, name=None, obd_engine_seconds=None, obd_odometer_meters=None, local_vars_configuration=None):  # noqa: E501
        """VehicleStatsListResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aux_input1 = None
        self._aux_input2 = None
        self._engine_states = None
        self._fuel_percents = None
        self._gps_distance_meters = None
        self._gps_odometer_meters = None
        self._id = None
        self._name = None
        self._obd_engine_seconds = None
        self._obd_odometer_meters = None
        self.discriminator = None

        if aux_input1 is not None:
            self.aux_input1 = aux_input1
        if aux_input2 is not None:
            self.aux_input2 = aux_input2
        if engine_states is not None:
            self.engine_states = engine_states
        if fuel_percents is not None:
            self.fuel_percents = fuel_percents
        if gps_distance_meters is not None:
            self.gps_distance_meters = gps_distance_meters
        if gps_odometer_meters is not None:
            self.gps_odometer_meters = gps_odometer_meters
        self.id = id
        self.name = name
        if obd_engine_seconds is not None:
            self.obd_engine_seconds = obd_engine_seconds
        if obd_odometer_meters is not None:
            self.obd_odometer_meters = obd_odometer_meters

    @property
    def aux_input1(self):
        """Gets the aux_input1 of this VehicleStatsListResponseData.  # noqa: E501

        A list of auxiliary equipment states.  # noqa: E501

        :return: The aux_input1 of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsAuxInput]
        """
        return self._aux_input1

    @aux_input1.setter
    def aux_input1(self, aux_input1):
        """Sets the aux_input1 of this VehicleStatsListResponseData.

        A list of auxiliary equipment states.  # noqa: E501

        :param aux_input1: The aux_input1 of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsAuxInput]
        """

        self._aux_input1 = aux_input1

    @property
    def aux_input2(self):
        """Gets the aux_input2 of this VehicleStatsListResponseData.  # noqa: E501

        A list of auxiliary equipment states.  # noqa: E501

        :return: The aux_input2 of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsAuxInput]
        """
        return self._aux_input2

    @aux_input2.setter
    def aux_input2(self, aux_input2):
        """Sets the aux_input2 of this VehicleStatsListResponseData.

        A list of auxiliary equipment states.  # noqa: E501

        :param aux_input2: The aux_input2 of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsAuxInput]
        """

        self._aux_input2 = aux_input2

    @property
    def engine_states(self):
        """Gets the engine_states of this VehicleStatsListResponseData.  # noqa: E501

        A list of engine state events for the given vehicle.  # noqa: E501

        :return: The engine_states of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsEngineState]
        """
        return self._engine_states

    @engine_states.setter
    def engine_states(self, engine_states):
        """Sets the engine_states of this VehicleStatsListResponseData.

        A list of engine state events for the given vehicle.  # noqa: E501

        :param engine_states: The engine_states of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsEngineState]
        """

        self._engine_states = engine_states

    @property
    def fuel_percents(self):
        """Gets the fuel_percents of this VehicleStatsListResponseData.  # noqa: E501

        A list of fuel percentage readings for the given vehicle.  # noqa: E501

        :return: The fuel_percents of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsFuelPercent]
        """
        return self._fuel_percents

    @fuel_percents.setter
    def fuel_percents(self, fuel_percents):
        """Sets the fuel_percents of this VehicleStatsListResponseData.

        A list of fuel percentage readings for the given vehicle.  # noqa: E501

        :param fuel_percents: The fuel_percents of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsFuelPercent]
        """

        self._fuel_percents = fuel_percents

    @property
    def gps_distance_meters(self):
        """Gets the gps_distance_meters of this VehicleStatsListResponseData.  # noqa: E501

        A list of GPS distance events for the given vehicle.  # noqa: E501

        :return: The gps_distance_meters of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsGpsDistanceMeters]
        """
        return self._gps_distance_meters

    @gps_distance_meters.setter
    def gps_distance_meters(self, gps_distance_meters):
        """Sets the gps_distance_meters of this VehicleStatsListResponseData.

        A list of GPS distance events for the given vehicle.  # noqa: E501

        :param gps_distance_meters: The gps_distance_meters of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsGpsDistanceMeters]
        """

        self._gps_distance_meters = gps_distance_meters

    @property
    def gps_odometer_meters(self):
        """Gets the gps_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501

        A list of GPS odometer events for the given vehicle.  # noqa: E501

        :return: The gps_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsGpsOdometerMeters]
        """
        return self._gps_odometer_meters

    @gps_odometer_meters.setter
    def gps_odometer_meters(self, gps_odometer_meters):
        """Sets the gps_odometer_meters of this VehicleStatsListResponseData.

        A list of GPS odometer events for the given vehicle.  # noqa: E501

        :param gps_odometer_meters: The gps_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsGpsOdometerMeters]
        """

        self._gps_odometer_meters = gps_odometer_meters

    @property
    def id(self):
        """Gets the id of this VehicleStatsListResponseData.  # noqa: E501

        The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.  # noqa: E501

        :return: The id of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleStatsListResponseData.

        The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.  # noqa: E501

        :param id: The id of this VehicleStatsListResponseData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VehicleStatsListResponseData.  # noqa: E501

        The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.  # noqa: E501

        :return: The name of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehicleStatsListResponseData.

        The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.  # noqa: E501

        :param name: The name of this VehicleStatsListResponseData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def obd_engine_seconds(self):
        """Gets the obd_engine_seconds of this VehicleStatsListResponseData.  # noqa: E501

        A list of OBD engine seconds readings for the given vehicle.  # noqa: E501

        :return: The obd_engine_seconds of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsObdEngineSeconds]
        """
        return self._obd_engine_seconds

    @obd_engine_seconds.setter
    def obd_engine_seconds(self, obd_engine_seconds):
        """Sets the obd_engine_seconds of this VehicleStatsListResponseData.

        A list of OBD engine seconds readings for the given vehicle.  # noqa: E501

        :param obd_engine_seconds: The obd_engine_seconds of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsObdEngineSeconds]
        """

        self._obd_engine_seconds = obd_engine_seconds

    @property
    def obd_odometer_meters(self):
        """Gets the obd_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501

        A list of OBD odometer readings for the given vehicle.  # noqa: E501

        :return: The obd_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501
        :rtype: list[VehicleStatsObdOdometerMeters]
        """
        return self._obd_odometer_meters

    @obd_odometer_meters.setter
    def obd_odometer_meters(self, obd_odometer_meters):
        """Sets the obd_odometer_meters of this VehicleStatsListResponseData.

        A list of OBD odometer readings for the given vehicle.  # noqa: E501

        :param obd_odometer_meters: The obd_odometer_meters of this VehicleStatsListResponseData.  # noqa: E501
        :type: list[VehicleStatsObdOdometerMeters]
        """

        self._obd_odometer_meters = obd_odometer_meters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleStatsListResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VehicleStatsListResponseData):
            return True

        return self.to_dict() != other.to_dict()
