# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2019-12-12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from samsara.configuration import Configuration


class CreateCarrierProposedAssignmentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_time': 'str',
        'driver_id': 'str',
        'shipping_docs': 'str',
        'trailer_names': 'list[str]',
        'vehicle_id': 'str'
    }

    attribute_map = {
        'active_time': 'activeTime',
        'driver_id': 'driverId',
        'shipping_docs': 'shippingDocs',
        'trailer_names': 'trailerNames',
        'vehicle_id': 'vehicleId'
    }

    def __init__(self, active_time=None, driver_id=None, shipping_docs=None, trailer_names=None, vehicle_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateCarrierProposedAssignmentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_time = None
        self._driver_id = None
        self._shipping_docs = None
        self._trailer_names = None
        self._vehicle_id = None
        self.discriminator = None

        if active_time is not None:
            self.active_time = active_time
        self.driver_id = driver_id
        if shipping_docs is not None:
            self.shipping_docs = shipping_docs
        if trailer_names is not None:
            self.trailer_names = trailer_names
        self.vehicle_id = vehicle_id

    @property
    def active_time(self):
        """Gets the active_time of this CreateCarrierProposedAssignmentRequest.  # noqa: E501

        Time after which this assignment will be active and visible to the driver on the mobile app. Not setting it makes it active now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :return: The active_time of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._active_time

    @active_time.setter
    def active_time(self, active_time):
        """Sets the active_time of this CreateCarrierProposedAssignmentRequest.

        Time after which this assignment will be active and visible to the driver on the mobile app. Not setting it makes it active now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.  # noqa: E501

        :param active_time: The active_time of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._active_time = active_time

    @property
    def driver_id(self):
        """Gets the driver_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501

        Samsara ID for the driver that this assignment is for.  # noqa: E501

        :return: The driver_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this CreateCarrierProposedAssignmentRequest.

        Samsara ID for the driver that this assignment is for.  # noqa: E501

        :param driver_id: The driver_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and driver_id is None:  # noqa: E501
            raise ValueError("Invalid value for `driver_id`, must not be `None`")  # noqa: E501

        self._driver_id = driver_id

    @property
    def shipping_docs(self):
        """Gets the shipping_docs of this CreateCarrierProposedAssignmentRequest.  # noqa: E501

        Shipping Documents that this assignment will propose to the driver.  # noqa: E501

        :return: The shipping_docs of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_docs

    @shipping_docs.setter
    def shipping_docs(self, shipping_docs):
        """Sets the shipping_docs of this CreateCarrierProposedAssignmentRequest.

        Shipping Documents that this assignment will propose to the driver.  # noqa: E501

        :param shipping_docs: The shipping_docs of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                shipping_docs is not None and len(shipping_docs) > 40):
            raise ValueError("Invalid value for `shipping_docs`, length must be less than or equal to `40`")  # noqa: E501

        self._shipping_docs = shipping_docs

    @property
    def trailer_names(self):
        """Gets the trailer_names of this CreateCarrierProposedAssignmentRequest.  # noqa: E501

        Names of trailers to propose.  # noqa: E501

        :return: The trailer_names of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._trailer_names

    @trailer_names.setter
    def trailer_names(self, trailer_names):
        """Sets the trailer_names of this CreateCarrierProposedAssignmentRequest.

        Names of trailers to propose.  # noqa: E501

        :param trailer_names: The trailer_names of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :type: list[str]
        """

        self._trailer_names = trailer_names

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501

        Samsara ID for the vehicle to propose.  # noqa: E501

        :return: The vehicle_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this CreateCarrierProposedAssignmentRequest.

        Samsara ID for the vehicle to propose.  # noqa: E501

        :param vehicle_id: The vehicle_id of this CreateCarrierProposedAssignmentRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vehicle_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vehicle_id`, must not be `None`")  # noqa: E501

        self._vehicle_id = vehicle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCarrierProposedAssignmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCarrierProposedAssignmentRequest):
            return True

        return self.to_dict() != other.to_dict()
