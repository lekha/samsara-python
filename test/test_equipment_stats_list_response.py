# coding: utf-8

"""
    Samsara API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2020-06-15
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import samsara
from samsara.models.equipment_stats_list_response import EquipmentStatsListResponse  # noqa: E501
from samsara.rest import ApiException

class TestEquipmentStatsListResponse(unittest.TestCase):
    """EquipmentStatsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test EquipmentStatsListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = samsara.models.equipment_stats_list_response.EquipmentStatsListResponse()  # noqa: E501
        if include_optional :
            return EquipmentStatsListResponse(
                data = [
                    samsara.models.equipment_stats_list_response_data.EquipmentStatsListResponse_data(
                        engine_rpm = [
                            samsara.models.equipment_engine_rpm.EquipmentEngineRpm(
                                time = '2019-05-03T04:30:31Z', 
                                value = 1800, )
                            ], 
                        engine_seconds = [
                            samsara.models.equipment_engine_seconds.EquipmentEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        engine_states = [
                            samsara.models.equipment_engine_state.EquipmentEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], 
                        fuel_percent = [
                            samsara.models.equipment_fuel_percent.EquipmentFuelPercent(
                                time = '2019-05-03T04:30:31Z', 
                                value = 54, )
                            ], 
                        gateway_engine_seconds = [
                            samsara.models.equipment_gateway_engine_seconds.EquipmentGatewayEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        gateway_engine_state = [
                            samsara.models.equipment_gateway_engine_state.EquipmentGatewayEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], 
                        gateway_j1939_engine_seconds = [
                            samsara.models.equipment_gateway_j1939_engine_seconds.EquipmentGatewayJ1939EngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        gps_odometer_meters = [
                            samsara.models.equipment_gps_odometer_meters.EquipmentGpsOdometerMeters(
                                time = '2019-05-03T04:30:31Z', 
                                value = 3200, )
                            ], 
                        id = '112', 
                        name = 'Crane A7', 
                        obd_engine_seconds = [
                            samsara.models.equipment_obd_engine_seconds.EquipmentObdEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        obd_engine_state = [
                            samsara.models.equipment_obd_engine_state.EquipmentObdEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], )
                    ], 
                pagination = samsara.models.pagination_response.paginationResponse(
                    end_cursor = 'MjkY', 
                    has_next_page = True, )
            )
        else :
            return EquipmentStatsListResponse(
                data = [
                    samsara.models.equipment_stats_list_response_data.EquipmentStatsListResponse_data(
                        engine_rpm = [
                            samsara.models.equipment_engine_rpm.EquipmentEngineRpm(
                                time = '2019-05-03T04:30:31Z', 
                                value = 1800, )
                            ], 
                        engine_seconds = [
                            samsara.models.equipment_engine_seconds.EquipmentEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        engine_states = [
                            samsara.models.equipment_engine_state.EquipmentEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], 
                        fuel_percent = [
                            samsara.models.equipment_fuel_percent.EquipmentFuelPercent(
                                time = '2019-05-03T04:30:31Z', 
                                value = 54, )
                            ], 
                        gateway_engine_seconds = [
                            samsara.models.equipment_gateway_engine_seconds.EquipmentGatewayEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        gateway_engine_state = [
                            samsara.models.equipment_gateway_engine_state.EquipmentGatewayEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], 
                        gateway_j1939_engine_seconds = [
                            samsara.models.equipment_gateway_j1939_engine_seconds.EquipmentGatewayJ1939EngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        gps_odometer_meters = [
                            samsara.models.equipment_gps_odometer_meters.EquipmentGpsOdometerMeters(
                                time = '2019-05-03T04:30:31Z', 
                                value = 3200, )
                            ], 
                        id = '112', 
                        name = 'Crane A7', 
                        obd_engine_seconds = [
                            samsara.models.equipment_obd_engine_seconds.EquipmentObdEngineSeconds(
                                time = '2019-05-03T04:30:31Z', 
                                value = 22374000, )
                            ], 
                        obd_engine_state = [
                            samsara.models.equipment_obd_engine_state.EquipmentObdEngineState(
                                time = '2019-05-03T04:30:31Z', 
                                value = 'On', )
                            ], )
                    ],
                pagination = samsara.models.pagination_response.paginationResponse(
                    end_cursor = 'MjkY', 
                    has_next_page = True, ),
        )

    def testEquipmentStatsListResponse(self):
        """Test EquipmentStatsListResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
